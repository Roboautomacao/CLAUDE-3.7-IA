INTERACE DASHBORD DROPHUNTE + PLANO COMPLETO DE IMPLEMENTA√á√ÉO DO DROPHUNTER


import React, { useState, useEffect } from 'react';
import { 
  Search, Filter, ChevronDown, RefreshCw, SlidersHorizontal, Globe, 
  ShoppingBag, BarChart2, Star, StarOff, Clock, ExternalLink, Plus, 
  Flag, FileText, BrainCircuit, Zap, Copy, Share2, Sparkles, BarChart,
  Award, TrendingUp, PieChart, ShoppingCart, Database, Layers
} from 'lucide-react';

// Interface completamente alinhada com o plano de implementa√ß√£o e treinamento da Claude 3.7 Sonnet
export default function DropHunterDashboard() {
  const [selectedTab, setSelectedTab] = useState("oportunidades");
  const [selectedCountry, setSelectedCountry] = useState("all");
  const [selectedOpportunity, setSelectedOpportunity] = useState(null);
  const [showAnalysisModal, setShowAnalysisModal] = useState(false);
  const [showExpertMethodologies, setShowExpertMethodologies] = useState(false);
  const [showWorkflowModal, setShowWorkflowModal] = useState(false);
  
  // Pa√≠ses priorit√°rios conforme especificado no plano de implementa√ß√£o
  const countries = [
    { 
      id: "uk", 
      name: "Reino Unido", 
      flag: "üá¨üáß", 
      products: 46,
      roi: "11.000%",
      specialist: "Tom Breeze",
      methodology: "Emotional Resolution",
      campaignType: "Performance Max + YouTube",
      budget: "¬£50-200/dia (est√°gio 3)",
      lastVerification: "Hoje, 09:45"
    },
    { 
      id: "br", 
      name: "Brasil", 
      flag: "üáßüá∑", 
      products: 38,
      roi: "287%",
      specialist: "Frederick Vallaeys + Guru Lara",
      methodology: "Method 1-3-10 + Latin America Market Adaptation",
      campaignType: "Search",
      budget: "R$150-600/dia (est√°gio 3)",
      lastVerification: "Hoje, 08:30"
    },
    { 
      id: "in", 
      name: "√çndia", 
      flag: "üáÆüá≥", 
      products: 27,
      roi: "213%",
      specialist: "Joe Martinez",
      methodology: "Asset Group Isolation",
      campaignType: "Performance Max",
      budget: "‚Çπ3.000-12.000/dia (est√°gio 3)",
      lastVerification: "Ontem, 23:15"
    },
    { 
      id: "es", 
      name: "Espanha", 
      flag: "üá™üá∏", 
      products: 19,
      roi: "1.500%",
      specialist: "Savannah Sanchez",
      methodology: "Sistema 3U",
      campaignType: "YouTube Shorts",
      budget: "‚Ç¨50-200/dia (est√°gio 3)",
      lastVerification: "Hoje, 03:20"
    }
  ];
  
  // Oportunidades baseadas na an√°lise da Claude 3.7 Sonnet usando as metodologias dos especialistas
  const opportunities = [
    {
      id: 1,
      name: "Kit Rel√≥gio Smart Premium",
      country: "uk",
      flag: "üá¨üáß",
      score: 92,
      price: "¬£75",
      cost: "¬£30",
      roi: "150%",
      dateFound: "01/05/2025",
      category: "Gadgets",
      imageUrl: "/api/placeholder/400/300",
      isFavorite: true,
      // An√°lise da Claude 3.7 Sonnet
      analysis: {
        summary: "Excelente oportunidade para o mercado brit√¢nico, com demanda crescente por wearables premium e margens excepcionais.",
        opportunityScore: 92,
        marketPotential: {
          marketSize: "¬£4.2B em 2025 com CAGR de 12.5%",
          competitionLevel: "M√©dia - Principalmente marcas de baixa qualidade",
          demandTrend: "Crescimento sustentado, pico no Q4"
        },
        productViability: {
          margin: "72% (excelente)",
          logisticalComplexity: "Baixa - produto compacto, f√°cil envio",
          qualityIssues: "M√≠nimas com o fornecedor selecionado"
        },
        competitiveAnalysis: {
          differentiation: "Qualidade superior e embalagem premium",
          entryBarriers: "Baixas - f√°cil in√≠cio r√°pido",
          uniquePositioning: "Kit completo vs. produtos individuais"
        },
        marketingPotential: {
          sellingAngles: ["Status e estilo", "Tecnologia acess√≠vel", "Valor excepcional"],
          targetAudience: {
            demographics: "Profissionais urbanos, 30-45, ¬£70k+",
            interests: ["Fitness", "Tecnologia", "Estilo de vida premium"],
            painPoints: ["Baixa qualidade dos produtos econ√¥micos", "Falta de solu√ß√µes integradas"]
          }
        },
        financialAnalysis: {
          estimatedCac: "¬£20-25 via Performance Max",
          projectedRoi: "150-175%",
          scalingPotential: "Excelente - ¬£15k-30k/m√™s"
        },
        risks: [
          "Poss√≠vel satura√ß√£o do mercado em 6-8 meses",
          "Vulnerabilidade a problemas de qualidade dos fornecedores"
        ],
        recommendations: [
          "Lan√ßar imediatamente com foco em Performance Max",
          "Utilizar embalagem premium para diferencia√ß√£o visual",
          "Testar an√∫ncios com √™nfase em status social e qualidade"
        ],
        creatives: {
          headlines: [
            "Tecnologia Premium, Pre√ßo Acess√≠vel",
            "O Kit Smart Completo Que Voc√™ Merece",
            "Eleve Seu Estilo E Produtividade"
          ],
          images: [
            "Produto em uso por executivo",
            "Kit completo em embalagem premium",
            "Comparativo com marcas conhecidas"
          ]
        },
        appliedMethodologies: [
          { name: "Emotional Resolution", expert: "Tom Breeze", focus: "Conex√£o com aspira√ß√µes de status" },
          { name: "Winner Product Blueprint", expert: "Sebastian Ghiorghiu", focus: "Valida√ß√£o de produto" }
        ]
      },
      // Status de processamento no fluxo de trabalho integrado
      workflow: {
        status: "completed",
        steps: [
          { name: "An√°lise de Oportunidade", status: "completed", date: "01/05/2025" },
          { name: "Briefing Criativo", status: "completed", date: "01/05/2025" },
          { name: "Gera√ß√£o de Assets", status: "completed", date: "02/05/2025" },
          { name: "Replica√ß√£o Shopify", status: "completed", date: "02/05/2025", stores: 2 },
          { name: "Relat√≥rio Executivo", status: "completed", date: "02/05/2025" }
        ]
      }
    },
    {
      id: 2,
      name: "Bolsa T√©rmica Port√°til",
      country: "br",
      flag: "üáßüá∑",
      score: 88,
      price: "R$159,90",
      cost: "R$65,00",
      roi: "146%",
      dateFound: "02/05/2025",
      category: "Casa",
      imageUrl: "/api/placeholder/400/300",
      isFavorite: false,
      // An√°lise da Claude 3.7 Sonnet
      analysis: {
        summary: "Forte oportunidade para o mercado brasileiro, combinando praticidade, custo-benef√≠cio e tend√™ncia de alimenta√ß√£o saud√°vel fora de casa.",
        opportunityScore: 88,
        marketPotential: {
          marketSize: "R$220M em 2025 com CAGR de 15.3%",
          competitionLevel: "M√©dia-baixa com poucos players de qualidade",
          demandTrend: "Crescente, especialmente em centros urbanos"
        },
        productViability: {
          margin: "68% (muito boa)",
          logisticalComplexity: "Baixa - produto leve, n√£o fr√°gil",
          qualityIssues: "Potenciais problemas com isolamento t√©rmico em algumas unidades"
        },
        competitiveAnalysis: {
          differentiation: "Design moderno e materiais de qualidade superior",
          entryBarriers: "Baixas - f√°cil entrada",
          uniquePositioning: "Foco em estilo e praticidade para profissionais urbanos"
        },
        marketingPotential: {
          sellingAngles: ["Economia com refei√ß√µes fora de casa", "Alimenta√ß√£o saud√°vel", "Estilo e praticidade"],
          targetAudience: {
            demographics: "Profissionais urbanos, 25-40, classe m√©dia",
            interests: ["Alimenta√ß√£o saud√°vel", "Economia", "Praticidade"],
            painPoints: ["Custo de alimenta√ß√£o fora", "Falta de op√ß√µes saud√°veis"]
          }
        },
        financialAnalysis: {
          estimatedCac: "R$40-50 via Google Search",
          projectedRoi: "140-160%",
          scalingPotential: "Bom - R$30k-60k/m√™s"
        },
        risks: [
          "Sazonalidade moderada, com queda em meses mais frios",
          "Competi√ß√£o de grandes marcas locais poss√≠vel"
        ],
        recommendations: [
          "Lan√ßar com foco em Google Search com keywords espec√≠ficas",
          "Destacar economia financeira na comunica√ß√£o",
          "Criar conte√∫do educativo sobre alimenta√ß√£o saud√°vel"
        ],
        creatives: {
          headlines: [
            "Economize R$450 por M√™s nas Refei√ß√µes",
            "Alimenta√ß√£o Saud√°vel Em Qualquer Lugar",
            "Design Moderno para o Dia a Dia"
          ],
          images: [
            "Produto em uso no ambiente de trabalho",
            "Comparativo de economia mensal",
            "Detalhes dos compartimentos e materiais"
          ]
        },
        appliedMethodologies: [
          { name: "Method 1-3-10", expert: "Frederick Vallaeys", focus: "Estrutura de campanha search" },
          { name: "Latin America Market Adaptation", expert: "Guru Lara", focus: "Adapta√ß√£o cultural brasileira" }
        ]
      },
      // Status de processamento no fluxo de trabalho integrado
      workflow: {
        status: "in_progress",
        steps: [
          { name: "An√°lise de Oportunidade", status: "completed", date: "02/05/2025" },
          { name: "Briefing Criativo", status: "completed", date: "02/05/2025" },
          { name: "Gera√ß√£o de Assets", status: "completed", date: "03/05/2025" },
          { name: "Replica√ß√£o Shopify", status: "in_progress", date: "03/05/2025", stores: 1 },
          { name: "Relat√≥rio Executivo", status: "pending", date: null }
        ]
      }
    },
    {
      id: 3,
      name: "Fone Bluetooth P47",
      country: "in",
      flag: "üáÆüá≥",
      score: 85,
      price: "‚Çπ1,899",
      cost: "‚Çπ780",
      roi: "143%",
      dateFound: "01/05/2025",
      category: "√Åudio",
      imageUrl: "/api/placeholder/400/300",
      isFavorite: true,
      // An√°lise da Claude 3.7 Sonnet
      analysis: {
        summary: "Excelente oportunidade para o mercado indiano, com forte demanda por acess√≥rios mobile de qualidade a pre√ßos acess√≠veis.",
        opportunityScore: 85,
        marketPotential: {
          marketSize: "‚Çπ35B em 2025 com CAGR de 22%",
          competitionLevel: "Alta, mas fragmentada com qualidade inconsistente",
          demandTrend: "Forte crescimento, especialmente em Tier 1 e 2 cities"
        },
        productViability: {
          margin: "65% (boa)",
          logisticalComplexity: "Muito baixa - produto pequeno e leve",
          qualityIssues: "Problemas ocasionais de conectividade Bluetooth"
        },
        competitiveAnalysis: {
          differentiation: "Bateria de longa dura√ß√£o e qualidade de som superior ao pre√ßo",
          entryBarriers: "Baixas, mas exige volume para competitividade",
          uniquePositioning: "Qualidade pr√≥xima a marcas premium por 1/3 do pre√ßo"
        },
        marketingPotential: {
          sellingAngles: ["Qualidade superior", "Pre√ßo acess√≠vel", "Bateria de longa dura√ß√£o"],
          targetAudience: {
            demographics: "Jovens urbanos, 18-30, estudantes e profissionais de TI",
            interests: ["Tecnologia", "M√∫sica", "Mobilidade"],
            painPoints: ["Fones de baixa qualidade que quebram facilmente", "Bateria fraca"]
          }
        },
        financialAnalysis: {
          estimatedCac: "‚Çπ450-600 via Performance Max",
          projectedRoi: "130-150%",
          scalingPotential: "Excelente - ‚Çπ800k-1.5M/m√™s"
        },
        risks: [
          "Alta competi√ß√£o no segmento",
          "Poss√≠veis problemas de qualidade em escala"
        ],
        recommendations: [
          "Lan√ßar com Performance Max focado em cidades Tier 1",
          "Destacar comparativo com marcas premium (sem nomear)",
          "Implementar estrat√©gia de upsell com acess√≥rios complementares"
        ],
        creatives: {
          headlines: [
            "Som Premium, Pre√ßo Acess√≠vel",
            "48 Horas de Bateria Ininterrupta",
            "A Experi√™ncia de ‚Çπ5,000 por Apenas ‚Çπ1,899"
          ],
          images: [
            "Produto usado por jovem profissional",
            "Comparativo visual de dura√ß√£o da bateria",
            "Detalhes dos drivers de √°udio"
          ]
        },
        appliedMethodologies: [
          { name: "Asset Group Isolation", expert: "Joe Martinez", focus: "Estrutura√ß√£o de Performance Max" },
          { name: "Ad Metrics Product Mining", expert: "Dejan Nikolic", focus: "An√°lise competitiva" }
        ]
      },
      // Status de processamento no fluxo de trabalho integrado
      workflow: {
        status: "completed",
        steps: [
          { name: "An√°lise de Oportunidade", status: "completed", date: "01/05/2025" },
          { name: "Briefing Criativo", status: "completed", date: "01/05/2025" },
          { name: "Gera√ß√£o de Assets", status: "completed", date: "02/05/2025" },
          { name: "Replica√ß√£o Shopify", status: "completed", date: "02/05/2025", stores: 2 },
          { name: "Relat√≥rio Executivo", status: "completed", date: "02/05/2025" }
        ]
      }
    },
    {
      id: 4,
      name: "Lumin√°ria LED Paisagem",
      country: "es",
      flag: "üá™üá∏",
      score: 83,
      price: "‚Ç¨39,99",
      cost: "‚Ç¨17,45",
      roi: "129%",
      dateFound: "30/04/2025",
      category: "Decora√ß√£o",
      imageUrl: "/api/placeholder/400/300",
      isFavorite: false,
      // An√°lise da Claude 3.7 Sonnet
      analysis: {
        summary: "Oportunidade atrativa para o mercado espanhol, aproveitando o forte turismo mediterr√¢neo e interesse em decora√ß√£o de ambientes.",
        opportunityScore: 83,
        marketPotential: {
          marketSize: "‚Ç¨120M em 2025 com CAGR de 8.2%",
          competitionLevel: "M√©dia com poucos players inovadores",
          demandTrend: "Sazonal, com picos em primavera/ver√£o"
        },
        productViability: {
          margin: "64% (boa)",
          logisticalComplexity: "M√©dia - produto um pouco fr√°gil",
          qualityIssues: "Ocasionais problemas com resist√™ncia √† √°gua"
        },
        competitiveAnalysis: {
          differentiation: "Design exclusivo inspirado em paisagens mediterr√¢neas",
          entryBarriers: "M√©dias - requer customiza√ß√£o para o mercado",
          uniquePositioning: "Produto de decora√ß√£o e ilumina√ß√£o pr√°tica"
        },
        marketingPotential: {
          sellingAngles: ["Ambienta√ß√£o exclusiva", "Economia de energia", "Design mediterr√¢neo"],
          targetAudience: {
            demographics: "Adultos, 30-55, classe m√©dia-alta, √°reas costeiras",
            interests: ["Decora√ß√£o", "Sustentabilidade", "Design"],
            painPoints: ["Ilumina√ß√£o externa cara e sem estilo", "Consumo energ√©tico"]
          }
        },
        financialAnalysis: {
          estimatedCac: "‚Ç¨15-20 via YouTube Shorts",
          projectedRoi: "120-140%",
          scalingPotential: "Bom - ‚Ç¨20k-35k/m√™s com sazonalidade"
        },
        risks: [
          "Forte sazonalidade com queda no inverno",
          "Depend√™ncia do mercado de turismo e segundas resid√™ncias"
        ],
        recommendations: [
          "Lan√ßar com YouTube Shorts destacando ambientes transformados",
          "Focar inicialmente em regi√µes costeiras",
          "Preparar varia√ß√£o do produto para per√≠odo de inverno"
        ],
        creatives: {
          headlines: [
            "Transforme Sua Varanda em um O√°sis Mediterr√¢neo",
            "Ilumina√ß√£o M√°gica, Consumo M√≠nimo",
            "Design Exclusivo Inspirado nas Costas Espanholas"
          ],
          images: [
            "Antes/depois de ambientes transformados",
            "Detalhes do design e efeitos de luz",
            "Produto em uso em varandas e jardins"
          ]
        },
        appliedMethodologies: [
          { name: "Sistema 3U para UGC", expert: "Savannah Sanchez", focus: "Conte√∫do para YouTube Shorts" },
          { name: "Cultural Context Matrix", expert: "Gianluca Binelli", focus: "Adapta√ß√£o ao contexto espanhol" }
        ]
      },
      // Status de processamento no fluxo de trabalho integrado
      workflow: {
        status: "in_progress",
        steps: [
          { name: "An√°lise de Oportunidade", status: "completed", date: "30/04/2025" },
          { name: "Briefing Criativo", status: "completed", date: "01/05/2025" },
          { name: "Gera√ß√£o de Assets", status: "in_progress", date: "02/05/2025" },
          { name: "Replica√ß√£o Shopify", status: "pending", date: null },
          { name: "Relat√≥rio Executivo", status: "pending", date: null }
        ]
      }
    },
    {
      id: 5,
      name: "Pulseira Magn√©tica Terap√™utica",
      country: "uk",
      flag: "üá¨üáß",
      score: 80,
      price: "¬£29.99",
      cost: "¬£12.50",
      roi: "139%",
      dateFound: "29/04/2025",
      category: "Sa√∫de",
      imageUrl: "/api/placeholder/400/300",
      isFavorite: true,
      // An√°lise da Claude 3.7 Sonnet
      analysis: {
        summary: "Boa oportunidade para o mercado brit√¢nico, aproveitando o crescente interesse em bem-estar e produtos terap√™uticos alternativos.",
        opportunityScore: 80,
        marketPotential: {
          marketSize: "¬£240M em 2025 com CAGR de 9.5%",
          competitionLevel: "M√©dia-alta com v√°rios competidores",
          demandTrend: "Crescimento constante, maior interesse no inverno"
        },
        productViability: {
          margin: "70% (muito boa)",
          logisticalComplexity: "Muito baixa - produto pequeno e dur√°vel",
          qualityIssues: "Raros problemas com o fecho magn√©tico"
        },
        competitiveAnalysis: {
          differentiation: "Design elegante e foco em evid√™ncias cient√≠ficas",
          entryBarriers: "Baixas, mas requer posicionamento cuidadoso",
          uniquePositioning: "Combina√ß√£o de estilo e benef√≠cios terap√™uticos"
        },
        marketingPotential: {
          sellingAngles: ["Al√≠vio natural de dores", "Eleg√¢ncia discreta", "Baseado em terapia magn√©tica"],
          targetAudience: {
            demographics: "Adultos, 40-65, classe m√©dia-alta, interesse em bem-estar",
            interests: ["Sa√∫de natural", "Fitness", "Terapias alternativas"],
            painPoints: ["Dores articulares", "Desconforto no dia-a-dia", "Medicamentos tradicionais"]
          }
        },
        financialAnalysis: {
          estimatedCac: "¬£12-16 via Performance Max",
          projectedRoi: "130-150%",
          scalingPotential: "Bom - ¬£20k-35k/m√™s"
        },
        risks: [
          "Escrut√≠nio regulat√≥rio sobre claims terap√™uticos",
          "Satura√ß√£o do mercado com produtos similares"
        ],
        recommendations: [
          "Lan√ßar com Performance Max focado em interesse em bem-estar",
          "Equilibrar comunica√ß√£o entre benef√≠cios e est√©tica",
          "Incluir testemunhos cuidadosamente formulados"
        ],
        creatives: {
          headlines: [
            "Eleg√¢ncia e Bem-estar em Seu Pulso",
            "A Solu√ß√£o Discreta para Desconforto Di√°rio",
            "Tecnologia Magn√©tica em Design Premium"
          ],
          images: [
            "Produto usado em contextos elegantes",
            "Detalhes da tecnologia magn√©tica",
            "Pessoas ativas usando o produto"
          ]
        },
        appliedMethodologies: [
          { name: "Emotional Resolution", expert: "Tom Breeze", focus: "Conex√£o emocional com bem-estar" },
          { name: "Evergreen Product Mining", expert: "Sarah Chrisp", focus: "Identifica√ß√£o de produto duradouro" }
        ]
      },
      // Status de processamento no fluxo de trabalho integrado
      workflow: {
        status: "completed",
        steps: [
          { name: "An√°lise de Oportunidade", status: "completed", date: "29/04/2025" },
          { name: "Briefing Criativo", status: "completed", date: "30/04/2025" },
          { name: "Gera√ß√£o de Assets", status: "completed", date: "01/05/2025" },
          { name: "Replica√ß√£o Shopify", status: "completed", date: "01/05/2025", stores: 2 },
          { name: "Relat√≥rio Executivo", status: "completed", date: "02/05/2025" }
        ]
      }
    }
  ];
  
  // Obter lojas Shopify conectadas para replica√ß√£o de produtos
  const shopifyStores = [
    { id: 1, name: "mystyle-gadgets.com", country: "uk", status: "active", productCount: 24 },
    { id: 2, name: "tech-trends-store.com", country: "uk", status: "active", productCount: 18 },
    { id: 3, name: "loja-premium-brasil.com.br", country: "br", status: "active", productCount: 15 },
    { id: 4, name: "india-smart-store.in", country: "in", status: "active", productCount: 12 },
    { id: 5, name: "espana-market.es", country: "es", status: "active", productCount: 8 }
  ];
  
  // Filtrar oportunidades com base no pa√≠s selecionado
  const filteredOpportunities = selectedCountry === "all" 
    ? opportunities 
    : opportunities.filter(opp => opp.country === selectedCountry);
  
  // Gerenciar detalhes de oportunidade
  useEffect(() => {
    if (selectedOpportunity) {
      setShowAnalysisModal(true);
    }
  }, [selectedOpportunity]);
  
  // Fechar modal de an√°lise
  const closeAnalysisModal = () => {
    setShowAnalysisModal(false);
    setShowExpertMethodologies(false);
    setSelectedOpportunity(null);
  };
  
  return (
    <div className="bg-gray-50 min-h-screen">
      {/* Header */}
      <header className="bg-indigo-700 text-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16 items-center">
            <div className="flex items-center">
              <div className="flex-shrink-0 flex items-center">
                <ShoppingBag className="h-8 w-8 mr-2" />
                <span className="text-xl font-bold">DropHunter</span>
                <span className="ml-2 px-2 py-0.5 text-xs bg-indigo-900 rounded-md">PRO</span>
              </div>
              <nav className="ml-8 flex space-x-4">
                <a href="#" className="px-3 py-2 rounded-md text-sm font-medium bg-indigo-800">Dashboard</a>
                <a href="#" className="px-3 py-2 rounded-md text-sm font-medium hover:bg-indigo-800">Monitoramento</a>
                <a href="#" className="px-3 py-2 rounded-md text-sm font-medium hover:bg-indigo-800">Lojas Shopify</a>
                <a href="#" className="px-3 py-2 rounded-md text-sm font-medium hover:bg-indigo-800">Est√∫dio de Criativos</a>
                <a href="#" className="px-3 py-2 rounded-md text-sm font-medium hover:bg-indigo-800">Relat√≥rios</a>
                <a href="#" className="px-3 py-2 rounded-md text-sm font-medium hover:bg-indigo-800">Especialistas</a>
              </nav>
            </div>
            <div className="flex items-center">
              <button className="p-1 rounded-full text-indigo-300 hover:bg-indigo-800 focus:outline-none">
                <span className="sr-only">Visualizar notifica√ß√µes</span>
                <svg className="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
                </svg>
              </button>
              <div className="ml-3 relative">
                <div className="flex items-center">
                  <button className="flex items-center max-w-xs rounded-full text-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" id="user-menu" aria-expanded="false" aria-haspopup="true">
                    <span className="sr-only">Abrir menu de usu√°rio</span>
                    <div className="h-8 w-8 rounded-full bg-indigo-500 flex items-center justify-center">
                      <span className="text-white font-medium">A</span>
                    </div>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </header>
      
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold text-gray-900">DropHunter Dashboard</h1>
          <div className="flex space-x-3">
            <button className="px-3 py-2 bg-white border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 flex items-center">
              <BrainCircuit size={16} className="mr-2 text-indigo-600" />
              Claude 3.7 Sonnet
            </button>
            <button className="px-3 py-2 bg-white border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 flex items-center">
              <RefreshCw size={16} className="mr-2" />
              Atualizar Dados
            </button>
            <button className="px-3 py-2 bg-indigo-600 rounded-md text-sm font-medium text-white hover:bg-indigo-700 flex items-center">
              <Plus size={16} className="mr-2" />
              Nova Configura√ß√£o
            </button>
          </div>
        </div>
        
        {/* Stats Cards */}
        <div className="grid grid-cols-4 gap-5 mb-6">
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <div className="p-3 rounded-md bg-blue-100 text-blue-600">
                <Globe size={20} />
              </div>
              <div className="ml-4">
                <h2 className="text-sm font-medium text-gray-500">Pa√≠ses Monitorados</h2>
                <div className="mt-1 flex items-baseline">
                  <p className="text-2xl font-semibold text-gray-900">4</p>
                  <p className="ml-2 text-sm font-medium text-green-600">Ativos</p>
                </div>
              </div>
            </div>
          </div>
          
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <div className="p-3 rounded-md bg-purple-100 text-purple-600">
                <ShoppingBag size={20} />
              </div>
              <div className="ml-4">
                <h2 className="text-sm font-medium text-gray-500">Oportunidades</h2>
                <div className="mt-1 flex items-baseline">
                  <p className="text-2xl font-semibold text-gray-900">130</p>
                  <p className="ml-2 text-sm font-medium text-green-600">+12 hoje</p>
                </div>
              </div>
            </div>
          </div>
          
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <div className="p-3 rounded-md bg-green-100 text-green-600">
                <BarChart2 size={20} />
              </div>
              <div className="ml-4">
                <h2 className="text-sm font-medium text-gray-500">ROI M√©dio</h2>
                <div className="mt-1 flex items-baseline">
                  <p className="text-2xl font-semibold text-gray-900">139%</p>
                  <p className="ml-2 text-sm font-medium text-green-600">+2.3%</p>
                </div>
              </div>
            </div>
          </div>
          
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <div className="p-3 rounded-md bg-yellow-100 text-yellow-600">
                <Star size={20} />
              </div>
              <div className="ml-4">
                <h2 className="text-sm font-medium text-gray-500">Favoritos</h2>
                <div className="mt-1 flex items-baseline">
                  <p className="text-2xl font-semibold text-gray-900">24</p>
                  <p className="ml-2 text-sm font-medium text-gray-500">Produtos</p>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        {/* Countries Panel - Alinhado com o plano de implementa√ß√£o */}
        <div className="bg-white rounded-lg shadow mb-6">
          <div className="px-4 py-5 sm:px-6 border-b border-gray-200">
            <h3 className="text-lg font-medium text-gray-900">Pa√≠ses Monitorados</h3>
            <p className="mt-1 text-sm text-gray-500">Configura√ß√µes e status de monitoramento por pa√≠s</p>
          </div>
          <div className="px-4 py-5 sm:p-6">
            <div className="grid grid-cols-4 gap-5">
              {countries.map(country => (
                <div 
                  key={country.id} 
                  className={`border rounded-lg p-4 cursor-pointer transition ${selectedCountry === country.id ? 'border-indigo-500 bg-indigo-50' : 'border-gray-200 hover:border-indigo-300'}`}
                  onClick={() => setSelectedCountry(country.id)}
                >
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center">
                      <span className="text-2xl mr-2">{country.flag}</span>
                      <span className="font-medium text-gray-900">{country.name}</span>
                    </div>
                    <div className={`h-2.5 w-2.5 rounded-full ${selectedCountry === country.id ? 'bg-indigo-600' : 'bg-gray-300'}`}></div>
                  </div>
                  <div className="text-xs text-gray-500 mb-1">Estrat√©gia:</div>
                  <div className="text-sm font-medium text-gray-900 mb-2">{country.specialist}</div>
                  <div className="text-xs text-gray-500 mb-1">ROI Target:</div>
                  <div className="text-sm font-medium text-green-600 mb-2">{country.roi}</div>
                  <div className="mt-2">
                    <div className="text-sm text-gray-500">Produtos encontrados</div>
                    <div className="text-lg font-semibold text-gray-900">{country.products}</div>
                  </div>
                  <div className="mt-2 flex justify-between items-center">
                    <div className="text-xs text-gray-500">√öltima verifica√ß√£o</div>
                    <div className="text-xs font-medium text-gray-700">{country.lastVerification}</div>
                  </div>
                </div>
              ))}
            </div>
            <div className="mt-6 text-right">
              <button className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 flex items-center ml-auto">
                <SlidersHorizontal size={16} className="mr-2" />
                Gerenciar Configura√ß√µes
              </button>
            </div>
          </div>
        </div>
        
        {/* Tabs and Filters */}
        <div className="bg-white rounded-lg shadow mb-6">
          <div className="border-b border-gray-200">
            <nav className="flex -mb-px">
              <button
                className={`px-6 py-4 text-sm font-medium border-b-2 ${
                  selectedTab === "oportunidades"
                    ? "border-indigo-500 text-indigo-600"
                    : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
                }`}
                onClick={() => setSelectedTab("oportunidades")}
              >
                Oportunidades
              </button>
              <button
                className={`px-6 py-4 text-sm font-medium border-b-2 ${
                  selectedTab === "favoritos"
                    ? "border-indigo-500 text-indigo-600"
                    : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
                }`}
                onClick={() => setSelectedTab("favoritos")}
              >
                Favoritos
              </button>
              <button
                className={`px-6 py-4 text-sm font-medium border-b-2 ${
                  selectedTab === "replicados"
                    ? "border-indigo-500 text-indigo-600"
                    : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
                }`}
                onClick={() => setSelectedTab("replicados")}
              >
                Replicados
              </button>
              <button
                className={`px-6 py-4 text-sm font-medium border-b-2 ${
                  selectedTab === "workflows"
                    ? "border-indigo-500 text-indigo-600"
                    : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
                }`}
                onClick={() => setSelectedTab("workflows")}
              >
                Fluxos de Trabalho
              </button>
            </nav>
          </div>
          
          <div className="p-4 flex justify-between items-center border-b border-gray-200">
            <div className="flex items-center">
              <div className="relative rounded-md shadow-sm">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Search size={18} className="text-gray-400" />
                </div>
                <input
                  type="text"
                  className="focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-10 sm:text-sm border-gray-300 rounded-md"
                  placeholder="Buscar produtos..."
                />
              </div>
              <div className="ml-3">
                <button className="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                  <Filter size={16} className="mr-2" />
                  Filtros
                  <ChevronDown size={16} className="ml-1" />
                </button>
              </div>
              {selectedCountry !== "all" && (
                <div className="ml-2 px-3 py-2 bg-indigo-100 text-indigo-800 rounded-md text-sm font-medium flex items-center">
                  {countries.find(c => c.id === selectedCountry)?.flag} {countries.find(c => c.id === selectedCountry)?.name}
                  <button 
                    className="ml-1.5 text-indigo-600 hover:text-indigo-800"
                    onClick={() => setSelectedCountry("all")}
                  >
                    √ó
                  </button>
                </div>
              )}
            </div>
            <div className="flex items-center">
              <span className="text-sm text-gray-500 mr-2">Ordenar por:</span>
              <select className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                <option>Score (maior para menor)</option>
                <option>ROI (maior para menor)</option>
                <option>Data (mais recente)</option>
                <option>Pre√ßo (menor para maior)</option>
              </select>
            </div>
          </div>
          
          {/* Product Grid - Alinhado com o treinamento da Claude */}
          <div className="grid grid-cols-3 gap-6 p-6">
            {filteredOpportunities.map(product => (
              <div key={product.id} className="bg-white border border-gray-200 rounded-lg overflow-hidden hover:shadow-md transition">
                <div className="relative">
                  <img src={product.imageUrl} alt={product.name} className="w-full h-48 object-cover" />
                  <div className="absolute top-2 left-2 flex space-x-1">
                    <span className="px-2 py-1 bg-white bg-opacity-90 rounded text-xs font-medium">{product.flag}</span>
                    <span className="px-2 py-1 bg-white bg-opacity-90 rounded text-xs font-medium text-gray-600">{product.category}</span>
                  </div>
                  <button className="absolute top-2 right-2 p-1.5 bg-white rounded-full">
                    {product.isFavorite ? (
                      <Star size={18} className="text-yellow-500" fill="currentColor" />
                    ) : (
                      <StarOff size={18} className="text-gray-400" />
                    )}
                  </button>
                  <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-gray-900 to-transparent py-2 px-3">
                    <div className="text-white font-medium truncate">{product.name}</div>
                  </div>
                </div>
                <div className="p-4">
                  <div className="flex justify-between items-center mb-2">
                    <div className="flex items-center">
                      <div className={`px-2 py-1 rounded text-xs font-medium ${
                        product.score >= 90 ? 'bg-green-100 text-green-800' :
                        product.score >= 80 ? 'bg-blue-100 text-blue-800' :
                        product.score >= 70 ? 'bg-yellow-100 text-yellow-800' :
                        'bg-gray-100 text-gray-800'
                      }`}>
                        Score Claude: {product.score}
                      </div>
                    </div>
                    <div className="text-xs text-gray-500 flex items-center">
                      <Clock size={14} className="mr-1" />
                      {product.dateFound}
                    </div>
                  </div>
                  <div className="grid grid-cols-3 gap-2 mb-3">
                    <div>
                      <div className="text-xs text-gray-500">Pre√ßo</div>
                      <div className="text-sm font-semibold">{product.price}</div>
                    </div>
                    <div>
                      <div className="text-xs text-gray-500">Custo</div>
                      <div className="text-sm font-semibold">{product.cost}</div>
                    </div>
                    <div>
                      <div className="text-xs text-gray-500">ROI</div>
                      <div className="text-sm font-semibold text-green-600">{product.roi}</div>
                    </div>
                  </div>
                  <div className="mb-3">
                    <div className="text-xs text-gray-500 mb-1">Especialistas utilizados:</div>
                    <div className="flex space-x-1 overflow-x-auto pb-1">
                      {product.analysis.appliedMethodologies.map((methodology, idx) => (
                        <span key={idx} className="px-2 py-1 bg-indigo-50 text-indigo-700 rounded text-xs whitespace-nowrap">
                          {methodology.expert}
                        </span>
                      ))}
                    </div>
                  </div>
                  <div className="flex space-x-2">
                    <button 
                      className="flex-1 px-3 py-2 bg-indigo-600 text-white text-sm font-medium rounded-md hover:bg-indigo-700"
                      onClick={() => setSelectedOpportunity(product)}
                    >
                      Ver Detalhes
                    </button>
                    <button 
                      className="px-3 py-2 border border-gray-300 text-gray-700 text-sm font-medium rounded-md hover:bg-gray-50"
                      onClick={() => setShowWorkflowModal(true)}
                    >
                      Fluxo de Trabalho
                    </button>
                  </div>
                </div>
                {/* Indicador de status do fluxo de trabalho */}
                <div className={`px-4 py-2 text-xs font-medium ${
                  product.workflow.status === 'completed' ? 'bg-green-100 text-green-800' :
                  product.workflow.status === 'in_progress' ? 'bg-blue-100 text-blue-800' :
                  'bg-yellow-100 text-yellow-800'
                } flex items-center justify-center`}>
                  {product.workflow.status === 'completed' ? 
                    <span className="flex items-center"><CheckCircle size={14} className="mr-1" /> Fluxo completo</span> :
                    product.workflow.status === 'in_progress' ? 
                    <span className="flex items-center"><Clock size={14} className="mr-1" /> Em processamento</span> :
                    <span className="flex items-center"><AlertCircle size={14} className="mr-1" /> Pendente</span>
                  }
                </div>
              </div>
            ))}
          </div>
          
          {/* Pagination */}
          <div className="px-4 py-3 bg-gray-50 border-t border-gray-200 sm:px-6 flex items-center justify-between">
            <div className="text-sm text-gray-700">
              Mostrando <span className="font-medium">1</span> a <span className="font-medium">5</span> de <span className="font-medium">130</span> resultados
            </div>
            <nav className="flex space-x-1">
              <a href="#" className="px-3 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">Anterior</a>
              <a href="#" className="px-3 py-2 border border-indigo-500 rounded-md text-sm font-medium text-white bg-indigo-600">1</a>
              <a href="#" className="px-3 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">2</a>
              <a href="#" className="px-3 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">3</a>
              <span className="px-3 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white">...</span>
              <a href="#" className="px-3 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">13</a>
              <a href="#" className="px-3 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">Pr√≥xima</a>
            </nav>
          </div>
        </div>
        
        {/* Multi-Shopify Integration - Alinhado com a Fase 8 do plano */}
        <div className="bg-white rounded-lg shadow mb-6">
          <div className="px-4 py-5 sm:px-6 border-b border-gray-200">
            <h3 className="text-lg font-medium text-gray-900">Lojas Shopify Conectadas</h3>
            <p className="mt-1 text-sm text-gray-500">Sistema Multi-Shopify para replica√ß√£o de produtos</p>
          </div>
          <div className="p-6">
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Loja</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Pa√≠s</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Produtos</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">A√ß√µes</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {shopifyStores.map(store => (
                    <tr key={store.id}>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">{store.name}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {countries.find(c => c.id === store.country)?.flag} {countries.find(c => c.id === store.country)?.name}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                          Ativo
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {store.productCount} produtos
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <a href="#" className="text-indigo-600 hover:text-indigo-900 mr-3">Gerenciar</a>
                        <a href="#" className="text-indigo-600 hover:text-indigo-900">Replicar</a>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            <div className="mt-6 flex justify-end">
              <button className="px-4 py-2 bg-indigo-600 rounded-md text-sm font-medium text-white hover:bg-indigo-700 flex items-center">
                <Plus size={16} className="mr-2" />
                Conectar Nova Loja
              </button>
            </div>
          </div>
        </div>
        
        {/* Monitoring Configuration - Alinhado com a Fase 7 do plano */}
        <div className="bg-white rounded-lg shadow mb-6">
          <div className="px-4 py-5 sm:px-6 border-b border-gray-200 flex justify-between items-center">
            <div>
              <h3 className="text-lg font-medium text-gray-900">Configurar Monitoramento</h3>
              <p className="mt-1 text-sm text-gray-500">Configure o Sistema de Monitoramento de Produtos por Pa√≠s</p>
            </div>
            <a href="#" className="text-sm text-indigo-600 hover:text-indigo-900 font-medium flex items-center">
              Ver documenta√ß√£o
              <ExternalLink size={14} className="ml-1" />
            </a>
          </div>
          <div className="p-6">
            <div className="grid grid-cols-2 gap-6">
              <div>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Selecione um Pa√≠s
                  </label>
                  <div className="flex space-x-2">
                    {['üáßüá∑', 'üá¨üáß', 'üáÆüá≥', 'üá™üá∏', 'üá∫üá∏', 'üá©üá™', 'üá¶üá∫', 'üá®üá¶'].map((flag, index) => (
                      <button key={index} className="p-3 border border-gray-300 rounded-md text-xl hover:bg-gray-50">
                        {flag}
                      </button>
                    ))}
                    <button className="p-3 border border-gray-300 rounded-md hover:bg-gray-50 text-gray-500">
                      <Plus size={20} />
                    </button>
                  </div>
                </div>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Tipo de Monitoramento
                  </label>
                  <div className="grid grid-cols-2 gap-3">
                    <button className="p-3 border border-indigo-500 bg-indigo-50 rounded-md text-sm font-medium text-indigo-700 flex items-center justify-center">
                      <Globe size={18} className="mr-2" />
                      Produtos Populares
                    </button>
                    <button className="p-3 border border-gray-300 rounded-md text-sm font-medium text-gray-700 flex items-center justify-center hover:bg-gray-50">
                      <Flag size={18} className="mr-2" />
                      Produtos Espec√≠ficos
                    </button>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Metodologia de Especialista
                  </label>
                  <select className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                    <option>Automatic (Claude 3.7 Sonnet Selection)</option>
                    <option>Tom Breeze (Emotional Resolution)</option>
                    <option>Frederick Vallaeys (Method 1-3-10)</option>
                    <option>Savannah Sanchez (Sistema 3U para UGC)</option>
                    <option>Joe Martinez (Asset Group Isolation)</option>
                    <option>Sebastian Ghiorghiu (Winner Product Blueprint)</option>
                    <option>Allen Cheng (East-West Arbitrage System)</option>
                  </select>
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Configura√ß√µes de Monitoramento
                </label>
                <div className="space-y-4">
                  <div>
                    <label className="block text-xs text-gray-500 mb-1">Frequ√™ncia de verifica√ß√£o</label>
                    <select className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                      <option>A cada 12 horas</option>
                      <option>Diariamente</option>
                      <option>A cada 3 dias</option>
                      <option>Semanalmente</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-xs text-gray-500 mb-1">Score m√≠nimo (Claude Analysis)</label>
                    <input
                      type="number"
                      min="1"
                      max="100"
                      defaultValue="70"
                      className="block w-full pl-3 pr-3 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
                    />
                  </div>
                  <div>
                    <label className="block text-xs text-gray-500 mb-1">ROI m√≠nimo</label>
                    <div className="relative rounded-md shadow-sm">
                      <input
                        type="number"
                        min="1"
                        max="1000"
                        defaultValue="100"
                        className="block w-full pl-3 pr-12 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
                      />
                      <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                        <span className="text-gray-500 sm:text-sm">%</span>
                      </div>
                    </div>
                  </div>
                  <div>
                    <label className="block text-xs text-gray-500 mb-1">Nichos priorit√°rios</label>
                    <select className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                      <option>Todos os nichos</option>
                      <option>British Heritage Products (Reino Unido)</option>
                      <option>E-commerce Retail / Gadgets Tech (Brasil)</option>
                      <option>Mobile Accessories (√çndia)</option>
                      <option>Turismo Mediterr√¢neo (Espanha)</option>
                    </select>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="mt-6 flex justify-end space-x-3">
              <button className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                Cancelar
              </button>
              <button className="px-4 py-2 bg-indigo-600 rounded-md text-sm font-medium text-white hover:bg-indigo-700">
                Iniciar Monitoramento
              </button>
            </div>
          </div>
        </div>
        
        {/* Modal de An√°lise da Claude 3.7 Sonnet - Alinhado com o sistema de an√°lise do plano */}
        {showAnalysisModal && selectedOpportunity && (
          <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50">
                            <div className="bg-white rounded-lg shadow-xl max-w-6xl w-full max-h-[90vh] overflow-hidden">
              <div className="flex justify-between items-center border-b border-gray-200 px-6 py-4">
                <div className="flex items-center">
                  <h3 className="text-lg font-medium text-gray-900">
                    {selectedOpportunity.flag} {selectedOpportunity.name}
                  </h3>
                  <span className={`ml-4 px-2 py-1 rounded text-xs font-medium ${
                    selectedOpportunity.score >= 90 ? 'bg-green-100 text-green-800' :
                    selectedOpportunity.score >= 80 ? 'bg-blue-100 text-blue-800' :
                    selectedOpportunity.score >= 70 ? 'bg-yellow-100 text-yellow-800' :
                    'bg-gray-100 text-gray-800'
                  }`}>
                    Score Claude: {selectedOpportunity.score}
                  </span>
                </div>
                <div className="flex items-center">
                  <button 
                    className="text-gray-400 hover:text-gray-500"
                    onClick={() => closeAnalysisModal()}
                  >
                    <XIcon size={24} />
                  </button>
                </div>
              </div>
              
              <div className="grid grid-cols-3 gap-6 p-6 overflow-y-auto max-h-[calc(90vh-112px)]">
                {/* Coluna 1: Detalhes do Produto e An√°lise de Mercado */}
                <div className="col-span-1 space-y-6">
                  {/* Detalhes do Produto */}
                  <div className="bg-gray-50 rounded-lg p-4">
                    <h4 className="text-sm font-medium text-gray-900 mb-4">Detalhes do Produto</h4>
                    <div className="space-y-3">
                      <div>
                        <div className="flex justify-between items-center">
                          <div className="text-xs text-gray-500">Pre√ßo de Venda</div>
                          <div className="text-sm font-semibold">{selectedOpportunity.price}</div>
                        </div>
                      </div>
                      <div>
                        <div className="flex justify-between items-center">
                          <div className="text-xs text-gray-500">Custo</div>
                          <div className="text-sm font-semibold">{selectedOpportunity.cost}</div>
                        </div>
                      </div>
                      <div>
                        <div className="flex justify-between items-center">
                          <div className="text-xs text-gray-500">ROI</div>
                          <div className="text-sm font-semibold text-green-600">{selectedOpportunity.roi}</div>
                        </div>
                      </div>
                      <div>
                        <div className="flex justify-between items-center">
                          <div className="text-xs text-gray-500">Categoria</div>
                          <div className="text-sm font-medium">{selectedOpportunity.category}</div>
                        </div>
                      </div>
                      <div>
                        <div className="flex justify-between items-center">
                          <div className="text-xs text-gray-500">Data Encontrada</div>
                          <div className="text-sm font-medium">{selectedOpportunity.dateFound}</div>
                        </div>
                      </div>
                    </div>
                    <div className="mt-4">
                      <img src={selectedOpportunity.imageUrl} alt={selectedOpportunity.name} className="w-full h-48 object-cover rounded-md" />
                    </div>
                  </div>
                  
                  {/* An√°lise de Mercado */}
                  <div className="bg-gray-50 rounded-lg p-4">
                    <h4 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
                      <Globe size={16} className="mr-2 text-indigo-600" />
                      An√°lise de Mercado
                    </h4>
                    <div className="space-y-3">
                      <div>
                        <div className="text-xs text-gray-500">Tamanho de Mercado</div>
                        <div className="text-sm font-medium">{selectedOpportunity.analysis.marketPotential.marketSize}</div>
                      </div>
                      <div>
                        <div className="text-xs text-gray-500">N√≠vel de Competi√ß√£o</div>
                        <div className="text-sm font-medium">{selectedOpportunity.analysis.marketPotential.competitionLevel}</div>
                      </div>
                      <div>
                        <div className="text-xs text-gray-500">Tend√™ncia de Demanda</div>
                        <div className="text-sm font-medium">{selectedOpportunity.analysis.marketPotential.demandTrend}</div>
                      </div>
                    </div>
                  </div>
                  
                  {/* An√°lise Competitiva */}
                  <div className="bg-gray-50 rounded-lg p-4">
                    <h4 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
                      <TrendingUp size={16} className="mr-2 text-indigo-600" />
                      An√°lise Competitiva
                    </h4>
                    <div className="space-y-3">
                      <div>
                        <div className="text-xs text-gray-500">Diferencia√ß√£o</div>
                        <div className="text-sm font-medium">{selectedOpportunity.analysis.competitiveAnalysis.differentiation}</div>
                      </div>
                      <div>
                        <div className="text-xs text-gray-500">Barreiras de Entrada</div>
                        <div className="text-sm font-medium">{selectedOpportunity.analysis.competitiveAnalysis.entryBarriers}</div>
                      </div>
                      <div>
                        <div className="text-xs text-gray-500">Posicionamento √önico</div>
                        <div className="text-sm font-medium">{selectedOpportunity.analysis.competitiveAnalysis.uniquePositioning}</div>
                      </div>
                    </div>
                  </div>
                </div>
                
                {/* Coluna 2: An√°lise da Claude 3.7 Sonnet */}
                <div className="col-span-1 space-y-6">
                  {/* Resumo da An√°lise */}
                  <div className="bg-indigo-50 rounded-lg p-4">
                    <h4 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
                      <BrainCircuit size={16} className="mr-2 text-indigo-600" />
                      An√°lise Claude 3.7 Sonnet
                    </h4>
                    <div className="text-sm">{selectedOpportunity.analysis.summary}</div>
                  </div>
                  
                  {/* Viabilidade do Produto */}
                  <div className="bg-gray-50 rounded-lg p-4">
                    <h4 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
                      <CheckCircle size={16} className="mr-2 text-indigo-600" />
                      Viabilidade do Produto
                    </h4>
                    <div className="space-y-3">
                      <div>
                        <div className="text-xs text-gray-500">Margem</div>
                        <div className="text-sm font-medium">{selectedOpportunity.analysis.productViability.margin}</div>
                      </div>
                      <div>
                        <div className="text-xs text-gray-500">Complexidade Log√≠stica</div>
                        <div className="text-sm font-medium">{selectedOpportunity.analysis.productViability.logisticalComplexity}</div>
                      </div>
                      <div>
                        <div className="text-xs text-gray-500">Problemas de Qualidade</div>
                        <div className="text-sm font-medium">{selectedOpportunity.analysis.productViability.qualityIssues}</div>
                      </div>
                    </div>
                  </div>
                  
                  {/* Potencial de Marketing */}
                  <div className="bg-gray-50 rounded-lg p-4">
                    <h4 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
                      <Zap size={16} className="mr-2 text-indigo-600" />
                      Potencial de Marketing
                    </h4>
                    <div>
                      <div className="text-xs text-gray-500 mb-1">√Çngulos de Venda</div>
                      <div className="flex flex-wrap gap-1 mb-3">
                        {selectedOpportunity.analysis.marketingPotential.sellingAngles.map((angle, idx) => (
                          <span key={idx} className="px-2 py-1 bg-blue-50 text-blue-700 rounded text-xs">
                            {angle}
                          </span>
                        ))}
                      </div>
                      <div className="text-xs text-gray-500 mb-1">Audi√™ncia-Alvo</div>
                      <div className="text-sm font-medium mb-1">
                        {selectedOpportunity.analysis.marketingPotential.targetAudience.demographics}
                      </div>
                      <div className="flex flex-wrap gap-1 mb-3">
                        {selectedOpportunity.analysis.marketingPotential.targetAudience.interests.map((interest, idx) => (
                          <span key={idx} className="px-2 py-1 bg-green-50 text-green-700 rounded text-xs">
                            {interest}
                          </span>
                        ))}
                      </div>
                      <div className="text-xs text-gray-500 mb-1">Pontos de Dor</div>
                      <div className="flex flex-wrap gap-1">
                        {selectedOpportunity.analysis.marketingPotential.targetAudience.painPoints.map((pain, idx) => (
                          <span key={idx} className="px-2 py-1 bg-red-50 text-red-700 rounded text-xs">
                            {pain}
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>
                  
                  {/* An√°lise Financeira */}
                  <div className="bg-gray-50 rounded-lg p-4">
                    <h4 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
                      <PieChart size={16} className="mr-2 text-indigo-600" />
                      An√°lise Financeira
                    </h4>
                    <div className="space-y-3">
                      <div>
                        <div className="text-xs text-gray-500">CAC Estimado</div>
                        <div className="text-sm font-medium">{selectedOpportunity.analysis.financialAnalysis.estimatedCac}</div>
                      </div>
                      <div>
                        <div className="text-xs text-gray-500">ROI Projetado</div>
                        <div className="text-sm font-medium text-green-600">{selectedOpportunity.analysis.financialAnalysis.projectedRoi}</div>
                      </div>
                      <div>
                        <div className="text-xs text-gray-500">Potencial de Escala</div>
                        <div className="text-sm font-medium">{selectedOpportunity.analysis.financialAnalysis.scalingPotential}</div>
                      </div>
                    </div>
                  </div>
                </div>
                
                {/* Coluna 3: Recomenda√ß√µes e Criativos */}
                <div className="col-span-1 space-y-6">
                  {/* Metodologias de Especialistas Aplicadas */}
                  <div 
                    className="bg-gradient-to-r from-indigo-50 to-purple-50 rounded-lg p-4 cursor-pointer hover:from-indigo-100 hover:to-purple-100 transition"
                    onClick={() => setShowExpertMethodologies(!showExpertMethodologies)}
                  >
                    <h4 className="text-sm font-medium text-gray-900 mb-2 flex items-center justify-between">
                      <span className="flex items-center">
                        <Award size={16} className="mr-2 text-indigo-600" />
                        Metodologias de Especialistas
                      </span>
                      <ChevronDown size={16} className={`text-indigo-600 transform ${showExpertMethodologies ? 'rotate-180' : ''} transition-transform`} />
                    </h4>
                    
                    {showExpertMethodologies ? (
                      <div className="space-y-3 mt-2">
                        {selectedOpportunity.analysis.appliedMethodologies.map((methodology, idx) => (
                          <div key={idx} className="bg-white rounded p-3 shadow-sm">
                            <div className="text-sm font-medium text-indigo-700 mb-1">{methodology.name}</div>
                            <div className="text-xs text-gray-500">Especialista</div>
                            <div className="text-sm font-medium mb-1">{methodology.expert}</div>
                            <div className="text-xs text-gray-500">Aplica√ß√£o</div>
                            <div className="text-sm">{methodology.focus}</div>
                          </div>
                        ))}
                        <div className="bg-indigo-100 rounded p-3">
                          <div className="text-xs text-indigo-800">
                            As metodologias acima foram selecionadas pela Claude 3.7 Sonnet atrav√©s do sistema de conhecimento especializado integrado conforme o plano de implementa√ß√£o do DropHunter.
                          </div>
                        </div>
                      </div>
                    ) : (
                      <div className="flex flex-wrap gap-2 mt-2">
                        {selectedOpportunity.analysis.appliedMethodologies.map((methodology, idx) => (
                          <div key={idx} className="px-2 py-1 bg-white text-indigo-700 rounded-full text-xs font-medium shadow-sm">
                            {methodology.name} - {methodology.expert}
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                  
                  {/* Riscos Identificados */}
                  <div className="bg-gray-50 rounded-lg p-4">
                    <h4 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
                      <AlertTriangle size={16} className="mr-2 text-amber-500" />
                      Riscos Identificados
                    </h4>
                    <ul className="space-y-2">
                      {selectedOpportunity.analysis.risks.map((risk, idx) => (
                        <li key={idx} className="text-sm flex items-start">
                          <span className="text-amber-500 mr-2">‚Ä¢</span>
                          <span>{risk}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                  
                  {/* Recomenda√ß√µes */}
                  <div className="bg-green-50 rounded-lg p-4">
                    <h4 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
                      <Sparkles size={16} className="mr-2 text-green-600" />
                      Recomenda√ß√µes
                    </h4>
                    <ul className="space-y-2">
                      {selectedOpportunity.analysis.recommendations.map((recommendation, idx) => (
                        <li key={idx} className="text-sm flex items-start">
                          <span className="text-green-600 mr-2">‚úì</span>
                          <span>{recommendation}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                  
                  {/* Criativos Recomendados */}
                  <div className="bg-gray-50 rounded-lg p-4">
                    <h4 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
                      <Copy size={16} className="mr-2 text-indigo-600" />
                      Criativos Recomendados
                    </h4>
                    <div className="space-y-3">
                      <div>
                        <div className="text-xs text-gray-500 mb-1">Headlines</div>
                        <ul className="space-y-1">
                          {selectedOpportunity.analysis.creatives.headlines.map((headline, idx) => (
                            <li key={idx} className="text-sm py-1 px-2 bg-white rounded-md shadow-sm">
                              {headline}
                            </li>
                          ))}
                        </ul>
                      </div>
                      <div>
                        <div className="text-xs text-gray-500 mb-1">Imagens</div>
                        <ul className="space-y-1">
                          {selectedOpportunity.analysis.creatives.images.map((image, idx) => (
                            <li key={idx} className="text-sm py-1 px-2 bg-white rounded-md shadow-sm">
                              {image}
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  </div>
                  
                  {/* Bot√µes de A√ß√£o */}
                  <div className="flex space-x-2">
                    <button className="flex-1 px-3 py-2 bg-indigo-600 text-white text-sm font-medium rounded-md hover:bg-indigo-700 flex items-center justify-center">
                      <Copy size={16} className="mr-2" />
                      Est√∫dio de Criativos
                    </button>
                    <button className="flex-1 px-3 py-2 bg-green-600 text-white text-sm font-medium rounded-md hover:bg-green-700 flex items-center justify-center">
                      <ShoppingCart size={16} className="mr-2" />
                      Replicar Produto
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
        
        {/* Modal de Fluxo de Trabalho Integrado - Alinhado com a Fase 11 do plano */}
        {showWorkflowModal && (
          <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
              <div className="flex justify-between items-center border-b border-gray-200 px-6 py-4">
                <div className="flex items-center">
                  <h3 className="text-lg font-medium text-gray-900">
                    Fluxo de Trabalho Integrado
                  </h3>
                </div>
                <div className="flex items-center">
                  <button 
                    className="text-gray-400 hover:text-gray-500"
                    onClick={() => setShowWorkflowModal(false)}
                  >
                    <XIcon size={24} />
                  </button>
                </div>
              </div>
              
              <div className="p-6 overflow-y-auto max-h-[calc(90vh-112px)]">
                <div className="bg-indigo-50 p-4 rounded-lg mb-6">
                  <h4 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
                    <Layers size={16} className="mr-2 text-indigo-600" />
                    Sistema Integrado de Fluxo de Trabalho
                  </h4>
                  <p className="text-sm text-gray-600">
                    O fluxo de trabalho integrado do DropHunter executa automaticamente 5 etapas sequenciais para cada oportunidade identificada, conforme definido na Fase 11 do plano de implementa√ß√£o.
                  </p>
                </div>
                
                <div className="relative">
                  {/* Linha de Timeline Vertical */}
                  <div className="absolute left-[15px] top-1 bottom-1 w-1 bg-gray-200 z-0"></div>
                  
                  {/* Etapas do Fluxo de Trabalho */}
                  <ul className="space-y-6 relative z-10">
                    <li className="flex">
                      <div className="flex-shrink-0 h-8 w-8 bg-green-500 rounded-full flex items-center justify-center">
                        <BrainCircuit size={16} className="text-white" />
                      </div>
                      <div className="ml-4 flex-1">
                        <h5 className="text-sm font-medium text-gray-900">An√°lise de Oportunidade</h5>
                        <p className="text-xs text-gray-500 mt-1">
                          A Claude 3.7 Sonnet analisa o produto usando as metodologias dos especialistas para avaliar seu potencial de mercado e viabilidade.
                        </p>
                        <div className="mt-2 bg-green-50 p-2 rounded">
                          <span className="text-xs font-medium text-green-700">Etapa realizada em 01/05/2025</span>
                        </div>
                      </div>
                    </li>
                    <li className="flex">
                      <div className="flex-shrink-0 h-8 w-8 bg-green-500 rounded-full flex items-center justify-center">
                        <Sparkles size={16} className="text-white" />
                      </div>
                      <div className="ml-4 flex-1">
                        <h5 className="text-sm font-medium text-gray-900">Briefing Criativo</h5>
                        <p className="text-xs text-gray-500 mt-1">
                          O sistema gera um briefing criativo completo baseado nas metodologias de Talia Wolf (Emotion-Based CRO), Amy Hebdon (Visual First) e outros especialistas.
                        </p>
                        <div className="mt-2 bg-green-50 p-2 rounded">
                          <span className="text-xs font-medium text-green-700">Etapa realizada em 01/05/2025</span>
                        </div>
                      </div>
                    </li>
                    <li className="flex">
                      <div className="flex-shrink-0 h-8 w-8 bg-blue-500 rounded-full flex items-center justify-center">
                        <Copy size={16} className="text-white" />
                      </div>
                      <div className="ml-4 flex-1">
                        <h5 className="text-sm font-medium text-gray-900">Gera√ß√£o de Assets</h5>
                        <p className="text-xs text-gray-500 mt-1">
                          O Est√∫dio de Criativos gera headlines, descri√ß√µes e especifica√ß√µes para imagens/v√≠deos seguindo as metodologias de copywriting especializado.
                        </p>
                        <div className="mt-2 bg-blue-50 p-2 rounded">
                          <span className="text-xs font-medium text-blue-700">Em processamento desde 02/05/2025</span>
                        </div>
                      </div>
                    </li>
                    <li className="flex">
                      <div className="flex-shrink-0 h-8 w-8 bg-gray-300 rounded-full flex items-center justify-center">
                        <ShoppingCart size={16} className="text-white" />
                      </div>
                      <div className="ml-4 flex-1">
                        <h5 className="text-sm font-medium text-gray-900">Replica√ß√£o Shopify</h5>
                        <p className="text-xs text-gray-500 mt-1">
                          O produto √© automaticamente replicado nas lojas Shopify conectadas atrav√©s do Sistema Multi-Shopify para adapta√ß√£o regional.
                        </p>
                        <div className="mt-2 bg-gray-100 p-2 rounded">
                          <span className="text-xs font-medium text-gray-700">Aguardando conclus√£o da etapa anterior</span>
                        </div>
                      </div>
                    </li>
                    <li className="flex">
                      <div className="flex-shrink-0 h-8 w-8 bg-gray-300 rounded-full flex items-center justify-center">
                        <FileText size={16} className="text-white" />
                      </div>
                      <div className="ml-4 flex-1">
                        <h5 className="text-sm font-medium text-gray-900">Relat√≥rio Executivo</h5>
                        <p className="text-xs text-gray-500 mt-1">
                          Gera√ß√£o de relat√≥rio executivo completo baseado nas metodologias de Joel Klettke, Ann Handley e Brian Clark.
                        </p>
                        <div className="mt-2 bg-gray-100 p-2 rounded">
                          <span className="text-xs font-medium text-gray-700">Aguardando processamento</span>
                        </div>
                      </div>
                    </li>
                  </ul>
                </div>
                
                <div className="mt-6 flex justify-between">
                  <button className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                    Ver Status Detalhado
                  </button>
                  <button className="px-4 py-2 bg-indigo-600 rounded-md text-sm font-medium text-white hover:bg-indigo-700">
                    Iniciar Pr√≥xima Etapa
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
        
        {/* Expert Knowledge Repository - Alinhado com a Fase 2 do plano */}
        <div className="bg-white rounded-lg shadow mb-6">
          <div className="px-4 py-5 sm:px-6 border-b border-gray-200">
            <h3 className="text-lg font-medium text-gray-900">Reposit√≥rio de Conhecimento Especializado</h3>
            <p className="mt-1 text-sm text-gray-500">Acesso √†s metodologias dos especialistas utilizadas pela Claude 3.7 Sonnet</p>
          </div>
          <div className="p-6">
            <div className="grid grid-cols-4 gap-6">
              <div className="col-span-1 bg-gradient-to-b from-purple-50 to-indigo-50 rounded-lg p-4">
                <div className="flex items-center mb-4">
                  <div className="p-2 bg-purple-100 rounded-md">
                    <Database size={20} className="text-purple-700" />
                  </div>
                  <div className="ml-3">
                    <h4 className="text-sm font-medium text-gray-900">Google Ads Experts</h4>
                    <p className="text-xs text-gray-500">44 especialistas</p>
                  </div>
                </div>
                <div className="space-y-2">
                  <div className="text-xs font-medium text-purple-800">Especialistas Destacados:</div>
                  <div className="space-y-1">
                    <div className="text-sm flex justify-between">
                      <span>Frederick Vallaeys</span>
                      <span className="text-xs text-gray-500">Method 1-3-10</span>
                    </div>
                    <div className="text-sm flex justify-between">
                      <span>Joe Martinez</span>
                      <span className="text-xs text-gray-500">Asset Group Isolation</span>
                    </div>
                    <div className="text-sm flex justify-between">
                      <span>Savannah Sanchez</span>
                      <span className="text-xs text-gray-500">Sistema 3U</span>
                    </div>
                  </div>
                  <button className="w-full mt-2 text-xs text-purple-700 hover:text-purple-900">
                    Ver todos os especialistas
                  </button>
                </div>
              </div>
              
              <div className="col-span-1 bg-gradient-to-b from-blue-50 to-cyan-50 rounded-lg p-4">
                <div className="flex items-center mb-4">
                  <div className="p-2 bg-blue-100 rounded-md">
                    <Database size={20} className="text-blue-700" />
                  </div>
                  <div className="ml-3">
                    <h4 className="text-sm font-medium text-gray-900">Product Mining Experts</h4>
                    <p className="text-xs text-gray-500">25 especialistas</p>
                  </div>
                </div>
                <div className="space-y-2">
                  <div className="text-xs font-medium text-blue-800">Especialistas Destacados:</div>
                  <div className="space-y-1">
                    <div className="text-sm flex justify-between">
                      <span>Sebastian Ghiorghiu</span>
                      <span className="text-xs text-gray-500">Winner Product Blueprint</span>
                    </div>
                    <div className="text-sm flex justify-between">
                      <span>Allen Cheng</span>
                      <span className="text-xs text-gray-500">East-West Arbitrage</span>
                    </div>
                    <div className="text-sm flex justify-between">
                      <span>Sarah Chrisp</span>
                      <span className="text-xs text-gray-500">Evergreen Mining</span>
                    </div>
                  </div>
                  <button className="w-full mt-2 text-xs text-blue-700 hover:text-blue-900">
                    Ver todos os especialistas
                  </button>
                </div>
              </div>
              
              <div className="col-span-1 bg-gradient-to-b from-green-50 to-emerald-50 rounded-lg p-4">
                <div className="flex items-center mb-4">
                  <div className="p-2 bg-green-100 rounded-md">
                    <Database size={20} className="text-green-700" />
                  </div>
                  <div className="ml-3">
                    <h4 className="text-sm font-medium text-gray-900">Copywriting Experts</h4>
                    <p className="text-xs text-gray-500">50 especialistas</p>
                  </div>
                </div>
                <div className="space-y-2">
                  <div className="text-xs font-medium text-green-800">Especialistas Destacados:</div>
                  <div className="space-y-1">
                    <div className="text-sm flex justify-between">
                      <span>Joanna Wiebe</span>
                      <span className="text-xs text-gray-500">Message-to-Market</span>
                    </div>
                    <div className="text-sm flex justify-between">
                      <span>Eugene Schwartz</span>
                      <span className="text-xs text-gray-500">5 States of Awareness</span>
                    </div>
                    <div className="text-sm flex justify-between">
                      <span>Joel Klettke</span>
                      <span className="text-xs text-gray-500">Evidence-Based Copy</span>
                    </div>
                  </div>
                  <button className="w-full mt-2 text-xs text-green-700 hover:text-green-900">
                    Ver todos os especialistas
                  </button>
                </div>
              </div>
              
              <div className="col-span-1 bg-gradient-to-b from-amber-50 to-orange-50 rounded-lg p-4">
                <div className="flex items-center mb-4">
                  <div className="p-2 bg-amber-100 rounded-md">
                    <Database size={20} className="text-amber-700" />
                  </div>
                  <div className="ml-3">
                    <h4 className="text-sm font-medium text-gray-900">Advanced Agents</h4>
                    <p className="text-xs text-gray-500">25 especialistas</p>
                  </div>
                </div>
                <div className="space-y-2">
                  <div className="text-xs font-medium text-amber-800">Especialistas Destacados:</div>
                  <div className="space-y-1">
                    <div className="text-sm flex justify-between">
                      <span>Adam Tong</span>
                      <span className="text-xs text-gray-500">LDM-7 Matrix</span>
                    </div>
                    <div className="text-sm flex justify-between">
                      <span>Elena Kobzar</span>
                      <span className="text-xs text-gray-500">Channel Allocation</span>
                    </div>
                    <div className="text-sm flex justify-between">
                      <span>Marco Visentin</span>
                      <span className="text-xs text-gray-500">Full-Cycle Automation</span>
                    </div>
                  </div>
                  <button className="w-full mt-2 text-xs text-amber-700 hover:text-amber-900">
                    Ver todos os especialistas
                  </button>
                </div>
              </div>
            </div>
            
            <div className="mt-6 p-4 bg-indigo-50 rounded-lg">
              <div className="flex items-start">
                <div className="flex-shrink-0">
                  <BrainCircuit size={24} className="text-indigo-600" />
                </div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-gray-900">Sistema de Emula√ß√£o de Especialistas Integrado</h3>
                  <p className="mt-1 text-sm text-gray-500">
                    A Claude 3.7 Sonnet tem acesso a todas as metodologias dos especialistas atrav√©s do ExpertKnowledgeRepository e seleciona automaticamente a melhor combina√ß√£o para cada oportunidade de produto.
                  </p>
                  <div className="mt-2">
                    <a href="#" className="text-sm font-medium text-indigo-600 hover:text-indigo-500">
                      Saiba mais sobre o processo de treinamento
                    </a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}

// Componentes de √≠cones simulados
const CheckCircle = ({ size, className }) => (
  <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
    <polyline points="22 4 12 14.01 9 11.01"></polyline>
  </svg>
);

const AlertCircle = ({ size, className }) => (
  <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <circle cx="12" cy="12" r="10"></circle>
    <line x1="12" y1="8" x2="12" y2="12"></line>
    <line x1="12" y1="16" x2="12.01" y2="16"></line>
  </svg>
);

const XIcon = ({ size, className }) => (
  <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <line x1="18" y1="6" x2="6" y2="18"></line>
    <line x1="6" y1="6" x2="18" y2="18"></line>
  </svg>
);

const AlertTriangle = ({ size, className }) => (
  <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path>
    <line x1="12" y1="9" x2="12" y2="13"></line>
    <line x1="12" y1="17" x2="12.01" y2="17"></line>
  </svg>
);


/**
 * PLANO COMPLETO DE IMPLEMENTA√á√ÉO DO DROPHUNTER
 * Alinhado com o treinamento da Claude 3.7 Sonnet
 */

// BLOCO 1: ARQUITETURA E FUNDA√á√ÉO DO DROPHUNTER

/**
 * Fase 1: Inicializa√ß√£o da Infraestrutura
 * Status: ‚úÖ Conclu√≠do
 */
class DropHunterInfrastructure {
  constructor() {
    // Componentes j√° implementados
    this.postgresModels = new PostgresModels(); // Modelos de dados PostgreSQL completos
    this.claudeAPI = new ClaudeIntegrationAPI(); // API de integra√ß√£o com Claude 3.7
    this.backendControllers = new BackendControllers(); // Controladores backend
    this.opportunityDetailPage = new OpportunityDetailPage(); // P√°gina de detalhes de oportunidade
    this.uiComponents = new UIComponents(); // Componentes UI b√°sicos
  }

  async initialize() {
    // Inicializar e validar componentes existentes
    await this.postgresModels.validate();
    await this.claudeAPI.testConnection();
    await this.backendControllers.registerRoutes();
    
    console.log("Infraestrutura b√°sica do DropHunter inicializada com sucesso");
    return { status: "success", message: "Infraestrutura inicializada" };
  }
}

/**
 * Fase 2: Sistema de Conhecimento Especializado Unificado
 * Status: ‚è±Ô∏è Pendente (Priorit√°rio)
 */
class ExpertKnowledgeRepository {
  constructor(specialistType, count) {
    this.specialistType = specialistType;
    this.expertCount = count;
    this.methodologies = {};
    this.conceptRelations = new Map();
    this.taxonomies = new Map();
  }

  async initialize(options) {
    console.log(`Inicializando reposit√≥rio de conhecimento para ${this.expertCount} especialistas em ${this.specialistType}...`);
    
    try {
      // Carregar taxonomia de conceitos do especialista
      await this.loadTaxonomy(options.taxonomyPath);
      
      // Carregar conceitos e metodologias
      await this.loadMethodologies(options.source);
      
      // Inicializar modelo de embedding
      await this.initializeEmbeddingModel(options.embedModelPath);
      
      console.log(`Reposit√≥rio de ${this.specialistType} inicializado com sucesso: ${Object.keys(this.methodologies).length} metodologias carregadas`);
      return true;
    } catch (error) {
      console.error(`Erro na inicializa√ß√£o do reposit√≥rio ${this.specialistType}:`, error);
      return false;
    }
  }

  async getMethodology(methodologyName) {
    return this.methodologies[methodologyName] || null;
  }

  async getAllConcepts() {
    return Array.from(this.conceptRelations.keys());
  }

  async verifyIntegrity() {
    // Verificar integridade do reposit√≥rio de conhecimento
    const conceptCount = this.conceptRelations.size;
    const relationCount = Array.from(this.conceptRelations.values())
                           .reduce((total, relations) => total + relations.length, 0);
    
    const integrity = Math.min(100, (conceptCount > 0 ? (relationCount / conceptCount) * 100 : 0));
    
    return {
      integrity: integrity,
      concepts: conceptCount,
      relations: relationCount
    };
  }
}

/**
 * Fase 3: Sistema Estratificado de An√°lise de Produto
 * Status: ‚è±Ô∏è Pendente (Priorit√°rio)
 */
class ProductDiscoverySystem {
  constructor() {
    this.methodologies = [];
    this.analysisModels = new Map();
    this.evaluationCriteria = new Map();
  }

  async initialize(methodologies) {
    console.log(`Inicializando sistema de descoberta de produtos com ${methodologies.length} metodologias...`);
    
    try {
      // Armazenar metodologias
      this.methodologies = methodologies;
      
      // Inicializar modelos de an√°lise para cada metodologia
      for (const methodology of methodologies) {
        await this.initializeAnalysisModel(methodology);
      }
      
      // Configurar crit√©rios de avalia√ß√£o combinados
      await this.configureEvaluationCriteria();
      
      console.log("Sistema de descoberta de produtos inicializado com sucesso");
      return true;
    } catch (error) {
      console.error("Erro na inicializa√ß√£o do sistema de descoberta:", error);
      return false;
    }
  }

  async initializeAnalysisModel(methodology) {
    // Criar modelo de an√°lise baseado na metodologia
    const modelKey = methodology.name.replace(/\s+/g, '_').toLowerCase();
    this.analysisModels.set(modelKey, {
      methodology: methodology.name,
      parameters: methodology.key_principles,
      weights: this.deriveWeights(methodology),
      threshold: 0.75
    });
  }

  deriveWeights(methodology) {
    // Derivar pesos para crit√©rios baseados na metodologia
    // Implementa√ß√£o simplificada
    return methodology.key_principles.reduce((weights, _, index) => {
      weights[`criterion_${index + 1}`] = 1.0 / methodology.key_principles.length;
      return weights;
    }, {});
  }

  async configureEvaluationCriteria() {
    // Configurar crit√©rios de avalia√ß√£o combinados de todas as metodologias
    const allCriteria = this.methodologies.flatMap(m => m.key_principles);
    const uniqueCriteria = [...new Set(allCriteria)];
    
    uniqueCriteria.forEach((criterion, index) => {
      this.evaluationCriteria.set(criterion, {
        id: `criterion_${index + 1}`,
        description: criterion,
        weight: 1.0 / uniqueCriteria.length,
        threshold: 0.65
      });
    });
  }

  async validate() {
    // Validar o sistema de descoberta de produtos
    // Em um ambiente real, isso executaria testes com dados conhecidos
    return 9.2; // Score de valida√ß√£o simulado (0-10)
  }
}

/**
 * Fase 4: Sistema de An√°lise Regional e Adapta√ß√£o de Mercado
 * Status: ‚è±Ô∏è Pendente (Alta Prioridade)
 */
class RegionalMarketAnalysisSystem {
  constructor() {
    this.methodologies = [];
    this.marketDataByRegion = new Map();
    this.regionalAnalysisModels = new Map();
  }

  async initialize(methodologies) {
    console.log(`Inicializando sistema de an√°lise de mercado regional com ${methodologies.length} metodologias...`);
    
    try {
      // Armazenar metodologias
      this.methodologies = methodologies;
      
      // Inicializar modelos de an√°lise para cada metodologia
      for (const methodology of methodologies) {
        await this.initializeRegionalModel(methodology);
      }
      
      console.log("Sistema de an√°lise de mercado regional inicializado com sucesso");
      return true;
    } catch (error) {
      console.error("Erro na inicializa√ß√£o do sistema de an√°lise regional:", error);
      return false;
    }
  }

  async initializeRegionalModel(methodology) {
    // Criar modelo de an√°lise regional baseado na metodologia
    const modelKey = methodology.name.replace(/\s+/g, '_').toLowerCase();
    this.regionalAnalysisModels.set(modelKey, {
      methodology: methodology.name,
      parameters: methodology.key_principles,
      regions: [] // Ser√° preenchido com loadRegionalData
    });
  }

  async loadRegionalData(regionConfigs) {
    console.log(`Carregando dados regionais para ${regionConfigs.length} regi√µes...`);
    
    for (const config of regionConfigs) {
      try {
        // Carregar dados espec√≠ficos da regi√£o
        const regionData = await this.loadRegionData(config.region, config.dataPath);
        this.marketDataByRegion.set(config.region, regionData);
        
        // Atualizar modelos com dados da regi√£o
        for (const model of this.regionalAnalysisModels.values()) {
          if (!model.regions.includes(config.region)) {
            model.regions.push(config.region);
          }
        }
        
        console.log(`Dados para regi√£o ${config.region} carregados com sucesso`);
      } catch (error) {
        console.error(`Erro ao carregar dados para regi√£o ${config.region}:`, error);
      }
    }
  }

  async loadRegionData(region, dataPath) {
    // Em um ambiente real, isso carregaria dados de um arquivo
    // Implementa√ß√£o simulada
    return {
      region,
      marketSize: Math.random() * 10000000000,
      growthRate: 0.05 + Math.random() * 0.15,
      competitionLevel: ['Low', 'Medium', 'High'][Math.floor(Math.random() * 3)],
      consumerBehavior: {
        priceConsciousness: Math.random(),
        brandLoyalty: Math.random(),
        techAdoption: Math.random()
      },
      seasonality: {
        peaks: ["Q4", "Summer"],
        valleys: ["Q1"]
      }
    };
  }

  async getRegionalInsights(product, region) {
    // Obter insights espec√≠ficos do produto para uma regi√£o
    const regionData = this.marketDataByRegion.get(region);
    if (!regionData) {
      return { error: `Dados n√£o dispon√≠veis para regi√£o ${region}` };
    }
    
    // Aplicar modelos de an√°lise para obter insights
    const insights = [];
    for (const [key, model] of this.regionalAnalysisModels.entries()) {
      if (model.regions.includes(region)) {
        insights.push({
          methodology: model.methodology,
          insights: this.generateInsightsFromModel(model, product, regionData)
        });
      }
    }
    
    return {
      product: product.name,
      region,
      insights,
      marketData: {
        size: regionData.marketSize,
        growth: regionData.growthRate,
        competition: regionData.competitionLevel
      },
      recommendations: this.generateRegionalRecommendations(product, regionData, insights)
    };
  }

  generateInsightsFromModel(model, product, regionData) {
    // Implementa√ß√£o simulada de gera√ß√£o de insights
    return model.parameters.map(parameter => ({
      aspect: parameter,
      insight: `Insight sobre ${parameter} para ${product.name} em ${regionData.region}`
    }));
  }

  generateRegionalRecommendations(product, regionData, insights) {
    // Implementa√ß√£o simulada de recomenda√ß√µes regionais
    return [
      `Adaptar ${product.name} para prefer√™ncias regionais em ${regionData.region}`,
      `Focar em esta√ß√µes de pico: ${regionData.seasonality.peaks.join(', ')}`,
      `Estrat√©gia de pre√ßo baseada em n√≠vel de competi√ß√£o ${regionData.competitionLevel}`
    ];
  }

  async validate() {
    // Validar o sistema de an√°lise regional
    // Em um ambiente real, isso executaria testes com dados conhecidos
    return 8.9; // Score de valida√ß√£o simulado (0-10)
  }
}

/**
 * Fase 5: Sistema de Copywriting e Marketing Estrat√©gico
 * Status: ‚è±Ô∏è Pendente (Alta Prioridade)
 */
class HighConversionCopywritingSystem {
  constructor() {
    this.methodologies = [];
    this.copyTemplates = new Map();
    this.channelSpecificRules = new Map();
  }

  async initialize(methodologies) {
    console.log(`Inicializando sistema de copywriting de alta convers√£o com ${methodologies.length} metodologies...`);
    
    try {
      // Armazenar metodologias
      this.methodologies = methodologies;
      
      // Inicializar templates de copy para cada metodologia
      for (const methodology of methodologies) {
        await this.initializeCopyTemplates(methodology);
      }
      
      // Configurar regras espec√≠ficas por canal
      await this.configureChannelRules();
      
      console.log("Sistema de copywriting de alta convers√£o inicializado com sucesso");
      return true;
    } catch (error) {
      console.error("Erro na inicializa√ß√£o do sistema de copywriting:", error);
      return false;
    }
  }

  async initializeCopyTemplates(methodology) {
    // Criar templates de copy baseados na metodologia
    const templateKey = methodology.name.replace(/\s+/g, '_').toLowerCase();
    
    // Estrutura de templates baseados em princ√≠pios da metodologia
    const templates = methodology.key_principles.map(principle => ({
      principle,
      headlineTemplates: this.generateHeadlineTemplates(principle),
      descriptionTemplates: this.generateDescriptionTemplates(principle),
      ctaTemplates: this.generateCTATemplates(principle)
    }));
    
    this.copyTemplates.set(templateKey, {
      methodology: methodology.name,
      templates,
      applicationContext: methodology.application
    });
  }

  generateHeadlineTemplates(principle) {
    // Implementa√ß√£o simplificada de gera√ß√£o de templates de headline
    return [
      `{benefit} para {audience}`,
      `Como {solution} pode {solve_problem}`,
      `{emotion}: {product} para {audience}`
    ];
  }

  generateDescriptionTemplates(principle) {
    // Implementa√ß√£o simplificada de gera√ß√£o de templates de descri√ß√£o
    return [
      `{product} ajuda {audience} a {benefit} sem {pain_point}.`,
      `Descubra como {product} pode {benefit} enquanto {additional_benefit}.`,
      `{audience} est√£o usando {product} para {benefit} e {another_benefit}.`
    ];
  }

  generateCTATemplates(principle) {
    // Implementa√ß√£o simplificada de gera√ß√£o de templates de CTA
    return [
      `Comece a {benefit_verb} hoje`,
      `Experimente {product} agora`,
      `Descubra {benefit}`
    ];
  }

  async configureChannelRules() {
    // Configurar regras espec√≠ficas por canal
    this.channelSpecificRules.set('facebook', {
      headline: { maxLength: 40, emotionalTriggers: true },
      description: { maxLength: 125, useEmojis: true },
      image: { aspectRatio: '1.91:1', textOverlay: true }
    });
    
    this.channelSpecificRules.set('google_search', {
      headline: { maxLength: 30, includeKeywords: true },
      description: { maxLength: 90, factual: true },
      extensions: { sitelinks: true, callouts: true }
    });
    
    this.channelSpecificRules.set('instagram', {
      headline: { maxLength: 40, hashtags: true },
      description: { maxLength: 125, useEmojis: true },
      image: { aspectRatio: '1:1', visualFocus: true }
    });
  }

  async generateCopy(product, audience, channel, methodologyName = null) {
    // Selecionar metodologia para gera√ß√£o de copy
    const methodology = methodologyName
      ? this.copyTemplates.get(methodologyName.replace(/\s+/g, '_').toLowerCase())
      : this.selectBestMethodology(product, audience, channel);
    
    if (!methodology) {
      return { error: "Metodologia n√£o encontrada" };
    }
    
    // Obter regras espec√≠ficas do canal
    const channelRules = this.channelSpecificRules.get(channel) || {
      headline: { maxLength: 50 },
      description: { maxLength: 150 }
    };
    
    // Gerar copy usando templates e regras
    const headlines = this.applyTemplates(
      methodology.templates,
      'headlineTemplates',
      product,
      audience,
      channelRules.headline
    );
    
    const descriptions = this.applyTemplates(
      methodology.templates,
      'descriptionTemplates',
      product,
      audience,
      channelRules.description
    );
    
    const ctas = this.applyTemplates(
      methodology.templates,
      'ctaTemplates',
      product,
      audience
    );
    
    return {
      methodology: methodology.methodology,
      headlines,
      descriptions,
      ctas,
      channelSpecifics: this.generateChannelSpecifics(channel, product, audience)
    };
  }

  selectBestMethodology(product, audience, channel) {
    // Implementa√ß√£o simplificada de sele√ß√£o de metodologia
    // Em um ambiente real, isso usaria um algoritmo de ranking
    return Array.from(this.copyTemplates.values())[0];
  }

  applyTemplates(templates, templateType, product, audience, rules = {}) {
    // Implementa√ß√£o simplificada de aplica√ß√£o de templates
    const allTemplates = templates.flatMap(t => t[templateType] || []);
    const selectedTemplates = allTemplates.slice(0, 3); // Selecionar 3 templates
    
    return selectedTemplates.map(template => {
      let text = template
        .replace('{product}', product.name)
        .replace('{audience}', audience.demographic)
        .replace('{benefit}', product.mainBenefit)
        .replace('{pain_point}', audience.painPoints[0])
        .replace('{solution}', product.name)
        .replace('{solve_problem}', `resolver ${audience.painPoints[0]}`)
        .replace('{emotion}', this.selectEmotion(product, audience))
        .replace('{benefit_verb}', this.deriveBenefitVerb(product.mainBenefit));
      
      // Aplicar regras espec√≠ficas
      if (rules.maxLength && text.length > rules.maxLength) {
        text = text.substring(0, rules.maxLength - 3) + '...';
      }
      
      if (rules.emotionalTriggers) {
        text = this.addEmotionalTrigger(text, audience);
      }
      
      if (rules.useEmojis) {
        text = this.addEmojis(text, product.category);
      }
      
      if (rules.includeKeywords && product.keywords) {
        text = this.ensureKeywords(text, product.keywords);
      }
      
      return text;
    });
  }

  selectEmotion(product, audience) {
    // Implementa√ß√£o simplificada de sele√ß√£o de emo√ß√£o
    const emotions = ['Surpreendente', 'Incr√≠vel', 'Revolucion√°rio', 'Fascinante', 'Satisfa√ß√£o'];
    return emotions[Math.floor(Math.random() * emotions.length)];
  }

  deriveBenefitVerb(benefit) {
    // Implementa√ß√£o simplificada de deriva√ß√£o de verbo de benef√≠cio
    return `obter ${benefit}`;
  }

  addEmotionalTrigger(text, audience) {
    // Implementa√ß√£o simplificada de adi√ß√£o de gatilho emocional
    return text;
  }

  addEmojis(text, category) {
    // Implementa√ß√£o simplificada de adi√ß√£o de emojis
    return text;
  }

  ensureKeywords(text, keywords) {
    // Implementa√ß√£o simplificada de garantia de palavras-chave
    return text;
  }

  generateChannelSpecifics(channel, product, audience) {
    // Implementa√ß√£o simplificada de especificidades por canal
    return {};
  }

  async validate() {
    // Validar o sistema de copywriting
    // Em um ambiente real, isso executaria testes com dados conhecidos
    return 9.1; // Score de valida√ß√£o simulado (0-10)
  }
}

/**
 * Fase 6: Sistema de Implementa√ß√£o de Campanhas
 * Status: ‚è±Ô∏è Pendente
 */
class CampaignImplementationSystem {
  constructor() {
    this.methodologies = [];
    this.campaignTemplates = new Map();
    this.platformSpecificSettings = new Map();
  }

  async initialize(methodologies) {
    console.log(`Inicializando sistema de implementa√ß√£o de campanhas com ${methodologies.length} metodologias...`);
    
    try {
      // Armazenar metodologias
      this.methodologies = methodologies;
      
      // Inicializar templates de campanha para cada metodologia
      for (const methodology of methodologies) {
        await this.initializeCampaignTemplate(methodology);
      }
      
      // Configurar configura√ß√µes espec√≠ficas por plataforma
      await this.configurePlatformSettings();
      
      console.log("Sistema de implementa√ß√£o de campanhas inicializado com sucesso");
      return true;
    } catch (error) {
      console.error("Erro na inicializa√ß√£o do sistema de implementa√ß√£o:", error);
      return false;
    }
  }

  async initializeCampaignTemplate(methodology) {
    // Criar template de campanha baseado na metodologia
    const templateKey = methodology.name.replace(/\s+/g, '_').toLowerCase();
    
    this.campaignTemplates.set(templateKey, {
      methodology: methodology.name,
      structure: this.deriveCampaignStructure(methodology),
      biddingStrategy: this.deriveBiddingStrategy(methodology),
      applicationContext: methodology.application
    });
  }

  deriveCampaignStructure(methodology) {
    // Implementa√ß√£o simplificada de deriva√ß√£o de estrutura de campanha
    return {
      campaignType: 'Performance Max',
      assetGroups: 3,
      adSchedule: '24/7',
      audiences: ['In-market', 'Custom intent', 'Remarketing']
    };
  }

  deriveBiddingStrategy(methodology) {
    // Implementa√ß√£o simplificada de deriva√ß√£o de estrat√©gia de lance
    return {
      type: 'Target ROAS',
      targetRoas: 400,
      budgetAllocation: 'Standard',
      pacing: 'Accelerated'
    };
  }

  async configurePlatformSettings() {
    // Configurar configura√ß√µes espec√≠ficas por plataforma
    this.platformSpecificSettings.set('google_ads', {
      supportedCampaignTypes: ['Search', 'Display', 'Video', 'Shopping', 'Performance Max'],
      biddingStrategies: ['Manual CPC', 'Target CPA', 'Target ROAS', 'Maximize Conversions'],
      assetTypes: ['Text', 'Image', 'Video', 'HTML5']
    });
    
    this.platformSpecificSettings.set('facebook', {
      supportedCampaignTypes: ['Traffic', 'Conversions', 'Catalog Sales', 'App Installs'],
      biddingStrategies: ['Lowest Cost', 'Target Cost', 'Bid Cap'],
      assetTypes: ['Image', 'Video', 'Carousel', 'Collection']
    });
    
    this.platformSpecificSettings.set('tiktok', {
      supportedCampaignTypes: ['Traffic', 'Conversions', 'App Promotion'],
      biddingStrategies: ['Lowest Cost', 'Bid Cap', 'Cost Cap'],
      assetTypes: ['Video', 'Image', 'Carousel']
    });
  }

  async generateCampaignStrategy(product, market, methodologyName = null) {
    // Selecionar metodologia para gera√ß√£o de estrat√©gia de campanha
    const methodology = methodologyName
      ? this.campaignTemplates.get(methodologyName.replace(/\s+/g, '_').toLowerCase())
      : this.selectBestMethodology(product, market);
    
    if (!methodology) {
      return { error: "Metodologia n√£o encontrada" };
    }
    
    // Obter configura√ß√µes espec√≠ficas da plataforma
    const platform = market.recommendedPlatform || 'google_ads';
    const platformSettings = this.platformSpecificSettings.get(platform) || this.platformSpecificSettings.get('google_ads');
    
    // Gerar estrat√©gia de campanha
    return {
      methodology: methodology.methodology,
      campaignStructure: this.customizeCampaignStructure(methodology.structure, product, market, platformSettings),
      biddingStrategy: this.customizeBiddingStrategy(methodology.biddingStrategy, product, market, platformSettings),
      assetStrategy: this.generateAssetStrategy(product, market, platform),
      audienceStrategy: this.generateAudienceStrategy(product, market, platform),
      budgetAllocation: this.generateBudgetAllocation(product, market),
      implementationSteps: this.generateImplementationSteps(platform, product, market)
    };
  }

  selectBestMethodology(product, market) {
    // Implementa√ß√£o simplificada de sele√ß√£o de metodologia
    // Em um ambiente real, isso usaria um algoritmo de ranking
    return Array.from(this.campaignTemplates.values())[0];
  }

  customizeCampaignStructure(baseStructure, product, market, platformSettings) {
    // Implementa√ß√£o simplificada de personaliza√ß√£o de estrutura de campanha
    const structure = { ...baseStructure };
    
    // Ajustar tipo de campanha para o produto e mercado
    if (structure.campaignType === 'Performance Max' && !platformSettings.supportedCampaignTypes.includes('Performance Max')) {
      structure.campaignType = platformSettings.supportedCampaignTypes[0];
    }
    
    // Ajustar outros campos conforme necess√°rio
    
    return structure;
  }

  customizeBiddingStrategy(baseBidding, product, market, platformSettings) {
    // Implementa√ß√£o simplificada de personaliza√ß√£o de estrat√©gia de lance
    const bidding = { ...baseBidding };
    
    // Ajustar tipo de estrat√©gia para a plataforma
    if (!platformSettings.biddingStrategies.includes(bidding.type)) {
      bidding.type = platformSettings.biddingStrategies[0];
    }
    
    // Ajustar valores de ROAS/CPA com base no market
    if (bidding.type === 'Target ROAS' && market.averageROAS) {
      bidding.targetRoas = Math.max(200, market.averageROAS * 0.8);
    }
    
    return bidding;
  }

  generateAssetStrategy(product, market, platform) {
    // Implementa√ß√£o simplificada de gera√ß√£o de estrat√©gia de assets
    return {
      textAssets: {
        headlines: { count: 15, focus: ['Benefits', 'Features', 'USPs'] },
        descriptions: { count: 4, focus: ['Problem-Solution', 'Benefits'] }
      },
      visualAssets: {
        images: { count: 20, types: ['Product', 'Lifestyle', 'Process'] },
        videos: { count: 5, length: [15, 30] }
      }
    };
  }

  generateAudienceStrategy(product, market, platform) {
    // Implementa√ß√£o simplificada de gera√ß√£o de estrat√©gia de audi√™ncia
    return {
      inMarket: {
        segments: ['Home & Garden', 'Cooking Enthusiasts'],
        expansion: true
      },
      customIntent: {
        keywords: product.keywords,
        urls: [product.competitorUrls]
      },
      remarketing: {
        lists: ['Site Visitors - 30 Days', 'Cart Abandoners'],
        exclusions: ['Recent Purchasers']
      }
    };
  }

  generateBudgetAllocation(product, market) {
    // Implementa√ß√£o simplificada de gera√ß√£o de aloca√ß√£o de or√ßamento
    return {
      daily: market.recommendedBudget || 50,
      distribution: {
        performance_max: 0.6,
        search: 0.3,
        display: 0.1
      },
      pacingStrategy: 'Accelerated'
    };
  }

  generateImplementationSteps(platform, product, market) {
    // Implementa√ß√£o simplificada de gera√ß√£o de passos de implementa√ß√£o
    return [
      "Configurar campanhas com estrutura recomendada",
      "Implementar estrat√©gia de lance otimizada",
      "Criar e fazer upload de assets criativos",
      "Configurar segmenta√ß√£o de audi√™ncia",
      "Ativar rastreamento de convers√£o",
      "Implementar regras automatizadas para otimiza√ß√£o cont√≠nua"
    ];
  }

  async validate() {
    // Validar o sistema de implementa√ß√£o de campanhas
    // Em um ambiente real, isso executaria testes com dados conhecidos
    return 8.8; // Score de valida√ß√£o simulado (0-10)
  }
}

// BLOCO 2: COMPONENTES FUNCIONAIS DO DROPHUNTER

/**
 * Fase 7: Sistema de Monitoramento de Produtos por Pa√≠s
 * Status: ‚è±Ô∏è Pendente (M√°xima Prioridade - Atual Sprint)
 * 
 * Este componente √© o cora√ß√£o do DropHunter, utilizando a Claude 3.7 Sonnet
 * para analisar produtos e identificar oportunidades de mercado.
 */
class ProductMonitoringSystem {
  constructor() {
    // Depend√™ncias
    this.claudeAPI = new ClaudeIntegrationAPI();
    this.googleAdsAPI = new GoogleAdsAPIService();
    this.productRepository = new ProductRepository();
    this.marketRepository = new MarketRepository();
    this.jobScheduler = new JobScheduler();
    
    // Sistemas especializados
    this.productDiscoverySystem = new ProductDiscoverySystem();
    this.marketAnalysisSystem = new RegionalMarketAnalysisSystem();
    this.copywritingSystem = new HighConversionCopywritingSystem();
    this.campaignSystem = new CampaignImplementationSystem();
  }

  async initialize() {
    console.log("Inicializando Sistema de Monitoramento de Produtos por Pa√≠s...");
    
    try {
      // Inicializar conex√£o com Claude 3.7 Sonnet
      await this.claudeAPI.initialize();
      
      // Inicializar conex√£o com Google Ads API
      await this.googleAdsAPI.initialize();
      
      // Inicializar reposit√≥rios
      await this.productRepository.initialize();
      await this.marketRepository.initialize();
      
      // Inicializar agendador de tarefas
      await this.jobScheduler.initialize();
      
      // Carregar configura√ß√µes de pa√≠ses priorit√°rios
      await this.loadPriorityMarkets();
      
      console.log("Sistema de Monitoramento de Produtos por Pa√≠s inicializado com sucesso");
      return true;
    } catch (error) {
      console.error("Erro na inicializa√ß√£o do Sistema de Monitoramento:", error);
      return false;
    }
  }

  async loadPriorityMarkets() {
    // Carregar configura√ß√µes para mercados priorit√°rios
    this.priorityMarkets = [
      {
        country: 'Reino Unido',
        countryCode: 'GB',
        language: 'en',
        currency: 'GBP',
        niches: ['British Heritage Products'],
        roi: 110.0,
        strategy: {
          specialist: 'Tom Breeze',
          methodology: 'Emotional Resolution'
        },
        campaignType: ['Performance Max', 'YouTube'],
        searchVolume: 'high',
        competitionLevel: 'medium'
      },
      {
        country: 'Brasil',
        countryCode: 'BR',
        language: 'pt',
        currency: 'BRL',
        niches: ['E-commerce Retail', 'Gadgets Tech'],
        roi: 2.87,
        strategy: {
          specialist: 'Frederick Vallaeys',
          secondarySpecialist: 'Guru Lara',
          methodology: 'Method 1-3-10'
        },
        campaignType: ['Search'],
        searchVolume: 'high',
        competitionLevel: 'medium'
      },
      {
        country: '√çndia',
        countryCode: 'IN',
        language: 'en',
        currency: 'INR',
        niches: ['Mobile Accessories'],
        roi: 2.13,
        strategy: {
          specialist: 'Joe Martinez',
          methodology: 'Asset Group Isolation'
        },
        campaignType: ['Performance Max'],
        searchVolume: 'very high',
        competitionLevel: 'high'
      },
      {
        country: 'Espanha',
        countryCode: 'ES',
        language: 'es',
        currency: 'EUR',
        niches: ['Turismo Mediterr√¢neo'],
        roi: 15.0,
        strategy: {
          specialist: 'Savannah Sanchez',
          methodology: 'Sistema 3U'
        },
        campaignType: ['YouTube Shorts'],
        searchVolume: 'medium',
        competitionLevel: 'low'
      }
    ];
    
    console.log(`Configura√ß√µes de ${this.priorityMarkets.length} mercados priorit√°rios carregadas`);
  }

  /**
   * Configura monitoramento para um pa√≠s espec√≠fico
   */
  async configureMonitoring(countryCode, monitoringParams) {
    console.log(`Configurando monitoramento para pa√≠s: ${countryCode}`);
    
    // Validar c√≥digo do pa√≠s
    const country = this.priorityMarkets.find(m => m.countryCode === countryCode);
    if (!country) {
      throw new Error(`Pa√≠s n√£o configurado: ${countryCode}`);
    }
    
    // Criar defini√ß√£o do trabalho de monitoramento
    const jobId = uuidv4();
    const monitoringJob = {
      id: jobId,
      countryCode,
      country: country.country,
      params: {
        ...monitoringParams,
        niches: monitoringParams.niches || country.niches,
        campaignTypes: monitoringParams.campaignTypes || country.campaignType,
        minROAS: monitoringParams.minROAS || (country.roi * 0.5)
      },
      status: 'configured',
      createdAt: new Date(),
      nextRun: null
    };
    
    // Determinar cronograma de execu√ß√£o
    let cronPattern;
    switch (monitoringParams.monitoringFrequency) {
      case 'hourly': cronPattern = '0 * * * *'; break;
      case 'daily': cronPattern = '0 0 * * *'; break;
      case 'weekly': cronPattern = '0 0 * * 1'; break;
      case 'monthly': cronPattern = '0 0 1 * *'; break;
      default: cronPattern = '0 0 * * *'; // Default: di√°rio
    }
    
    // Agendar o trabalho
    await this.jobScheduler.scheduleJob(jobId, cronPattern, async () => {
      await this.runMonitoring(monitoringJob);
    });
    
    // Salvar configura√ß√£o no banco de dados
    await this.productRepository.saveMonitoringJob(monitoringJob);
    
    console.log(`Monitoramento configurado para ${country.country}, ID: ${jobId}`);
    return jobId;
  }

  /**
   * Executa monitoramento para um pa√≠s espec√≠fico
   */
  async runMonitoring(job) {
    console.log(`Executando monitoramento para ${job.country} (${job.countryCode})`);
    
    try {
      // Atualizar status do job
      job.status = 'running';
      job.lastRun = new Date();
      await this.productRepository.updateMonitoringJob(job);
      
      // Buscar produtos populares via Google Ads API
      const topProducts = await this.googleAdsService.findTopPerformingProducts(
        job.countryCode,
        job.params.campaignTypes,
        job.params.minConversions,
        job.params.minROAS
      );
      
      console.log(`Encontrados ${topProducts.length} produtos populares para an√°lise`);
      
      // Buscar dados de mercado para o pa√≠s
      const marketData = await this.marketRepository.getMarketData(job.countryCode);
      
      // Analisar cada produto usando a Claude 3.7 Sonnet
      const opportunities = [];
      
      for (const product of topProducts) {
        console.log(`Analisando produto: ${product.title}`);
        
        // Obter insights regionais para o produto
        const regionalInsights = await this.marketAnalysisSystem.getRegionalInsights(
          product, 
          job.country
        );
        
        // Preparar dados para an√°lise da Claude
        const analysisData = this.prepareProductAnalysisData(product, regionalInsights, marketData);
        
        // Gerar prompt para an√°lise da Claude
        const prompt = this.buildClaudeAnalysisPrompt(analysisData, job);
        
        // Obter an√°lise da Claude 3.7 Sonnet
        const claudeAnalysis = await this.claudeAPI.analyzeOpportunity(prompt);
        
        // Processar resposta da Claude
        const processedAnalysis = this.processClaudeResponse(claudeAnalysis);
        
        // Verificar se a oportunidade √© vi√°vel
        if (processedAnalysis.opportunityScore >= 70) {
          // Enriquecer dados com copywriting e estrat√©gia de campanha
          const copyStrategy = await this.copywritingSystem.generateCopy(
            product,
            processedAnalysis.targetAudience,
            job.params.campaignTypes[0]
          );
          
          const campaignStrategy = await this.campaignSystem.generateCampaignStrategy(
            product,
            { 
              country: job.country, 
              countryCode: job.countryCode,
              recommendedPlatform: job.params.campaignTypes[0]
            }
          );
          
          // Criar oportunidade
          const opportunity = {
            id: uuidv4(),
            productName: product.title,
            description: product.description,
            country: job.country,
            countryCode: job.countryCode,
            campaignType: job.params.campaignTypes[0],
            sourceData: {
              product,
              regionalInsights,
              marketData
            },
            aiAnalysis: processedAnalysis,
            copyStrategy,
            campaignStrategy,
            createdAt: new Date(),
            status: 'new',
            score: processedAnalysis.opportunityScore
          };
          
          // Salvar oportunidade
          await this.productRepository.saveOpportunity(opportunity);
          opportunities.push(opportunity);
          
          console.log(`Nova oportunidade identificada: ${product.title}, Score: ${processedAnalysis.opportunityScore}`);
        } else {
          console.log(`Produto n√£o qualificado como oportunidade: ${product.title}, Score: ${processedAnalysis.opportunityScore}`);
        }
      }
      
      // Atualizar status do job
      job.status = 'completed';
      job.lastRunResults = {
        productsAnalyzed: topProducts.length,
        opportunitiesFound: opportunities.length,
        timestamp: new Date()
      };
      await this.productRepository.updateMonitoringJob(job);
      
      console.log(`Monitoramento conclu√≠do para ${job.country}. Oportunidades encontradas: ${opportunities.length}`);
      return {
        success: true,
        opportunitiesCount: opportunities.length,
        jobId: job.id
      };
    } catch (error) {
      console.error(`Erro no monitoramento para ${job.country}:`, error);
      
      // Atualizar status do job com erro
      job.status = 'error';
      job.lastError = {
        message: error.message,
        stack: error.stack,
        timestamp: new Date()
      };
      await this.productRepository.updateMonitoringJob(job);
      
      return {
        success: false,
        error: error.message,
        jobId: job.id
      };
    }
  }

  /**
   * Prepara dados para an√°lise da Claude
   */
  prepareProductAnalysisData(product, regionalInsights, marketData) {
    // Combinar dados do produto, insights regionais e dados de mercado
    return {
      product: {
        title: product.title,
        description: product.description,
        price: product.price,
        category: product.category,
        features: product.features || [],
        specifications: product.specifications || {},
        averageRating: product.averageRating,
        reviewCount: product.reviewCount,
        images: product.images || []
      },
      marketData: {
        country: marketData.country,
        marketSize: marketData.size,
        growthRate: marketData.growthRate,
        competitionLevel: marketData.competitionLevel,
        seasonality: marketData.seasonality,
        trends: marketData.currentTrends || []
      },
      regionalInsights: {
        insights: regionalInsights.insights,
        recommendations: regionalInsights.recommendations,
        marketData: regionalInsights.marketData
      },
      performanceMetrics: {
        searchVolume: product.searchVolume,
        conversionRate: product.conversionRate,
        averageOrderValue: product.averageOrderValue,
        customerAcquisitionCost: product.customerAcquisitionCost,
        customerLifetimeValue: product.customerLifetimeValue
      }
    };
  }

  /**
   * Constr√≥i o prompt para an√°lise da Claude
   */
  buildClaudeAnalysisPrompt(analysisData, job) {
    return {
      system: `
        Voc√™ √© um especialista em an√°lise de oportunidades de dropshipping, treinado nas metodologias dos maiores especialistas do mundo, incluindo Sebastian Ghiorghiu (Winner Product Blueprint), Paul Lee (Geo-Specific Trend Analysis) e Allen Cheng (East-West Arbitrage System).
        
        Sua tarefa √© analisar dados de produtos e mercados para identificar oportunidades de dropshipping com alto potencial, considerando:
        
        1. POTENCIAL DE MERCADO:
           - Tamanho e crescimento do mercado
           - N√≠vel de competi√ß√£o
           - Tend√™ncias e sazonalidade
           - Demanda em rela√ß√£o √† oferta
        
        2. VIABILIDADE DO PRODUTO:
           - Margem potencial (ideal: 65-75%)
           - Facilidade log√≠stica (peso, tamanho, fragilidade)
           - Complexidade de opera√ß√£o
           - Potencial de problemas e devolu√ß√µes
        
        3. AN√ÅLISE COMPETITIVA:
           - Diferencia√ß√£o em rela√ß√£o a competidores
           - Barreiras de entrada para novos players
           - Possibilidade de posicionamento √∫nico
           - Estrat√©gias de competidores atuais
        
        4. POTENCIAL DE MARKETING:
           - √Çngulos de venda distintos
           - Possibilidade de storytelling
           - Segmenta√ß√µes de audi√™ncia dispon√≠veis
           - Canais de marketing vi√°veis
        
        5. AN√ÅLISE FINANCEIRA:
           - ROI esperado
           - Custo de aquisi√ß√£o de cliente estimado
           - Lifetime value potencial
           - Ciclo de vida do produto
        
        Forne√ßa uma an√°lise aprofundada do produto, identificando claramente:
        1. Se representa uma oportunidade vi√°vel
        2. Pontua√ß√£o de oportunidade (0-100)
        3. Potenciais problemas e riscos
        4. Estrat√©gias recomendadas para explorar a oportunidade
        
        Sua an√°lise deve ser concreta, baseada em dados, e altamente acion√°vel.
      `,
      user: `
        Analise a seguinte oportunidade de produto para dropshipping no pa√≠s ${job.country}:
        
        DADOS DO PRODUTO:
        ${JSON.stringify(analysisData.product, null, 2)}
        
        DADOS DE MERCADO:
        ${JSON.stringify(analysisData.marketData, null, 2)}
        
        INSIGHTS REGIONAIS:
        ${JSON.stringify(analysisData.regionalInsights, null, 2)}
        
        M√âTRICAS DE PERFORMANCE:
        ${JSON.stringify(analysisData.performanceMetrics, null, 2)}
        
        Forne√ßa uma an√°lise completa desta oportunidade, incluindo uma pontua√ß√£o de oportunidade (0-100) e recomenda√ß√µes acion√°veis.
        
        Estruture sua resposta em formato JSON com os seguintes campos:
        - summary: resumo executivo da an√°lise
        - opportunityScore: pontua√ß√£o de 0 a 100
        - marketPotential: an√°lise do potencial de mercado
        - productViability: an√°lise da viabilidade do produto
        - competitiveAnalysis: an√°lise competitiva
        - marketingPotential: an√°lise do potencial de marketing
        - financialAnalysis: an√°lise financeira
        - risks: riscos identificados
        - recommendations: recomenda√ß√µes acion√°veis
        - targetAudience: audi√™ncia-alvo recomendada
        - uniqueSellingPoints: pontos de venda √∫nicos
      `
    };
  }

  /**
   * Processa a resposta da Claude
   */
  processClaudeResponse(claudeResponse) {
    try {
      // Extrair a parte JSON da resposta
      const jsonMatch = claudeResponse.match(/```json\n([\s\S]*?)\n```/) ||
                       claudeResponse.match(/\{[\s\S]*\}/);
      
      if (jsonMatch) {
        return JSON.parse(jsonMatch[1] || jsonMatch[0]);
      } else {
        // Fallback para estrutura√ß√£o manual se o formato JSON n√£o for seguido
        return this.structureUnformattedResponse(claudeResponse);
      }
    } catch (error) {
      console.error("Erro ao processar resposta da Claude:", error);
      
      // Retornar um objeto estruturado mesmo em caso de erro
      return {
        summary: "Erro ao processar resposta da IA",
        opportunityScore: 0,
        error: error.message,
        rawResponse: claudeResponse
      };
    }
  }

  /**
   * Estrutura uma resposta n√£o formatada da Claude
   */
  structureUnformattedResponse(response) {
    // Extrair partes relevantes da resposta n√£o estruturada
    const summaryMatch = response.match(/resumo[:\s]+(.*?)(?=\n\n|\n[A-Z])/i);
    const scoreMatch = response.match(/pontua[√ßc][a√£]o[:\s]+(\d+)/i) || 
                      response.match(/score[:\s]+(\d+)/i);
    
    // Compilar em um objeto estruturado
    return {
      summary: summaryMatch ? summaryMatch[1].trim() : "An√°lise n√£o estruturada",
      opportunityScore: scoreMatch ? parseInt(scoreMatch[1]) : 50,
      marketPotential: "Extra√ß√£o manual necess√°ria",
      productViability: "Extra√ß√£o manual necess√°ria",
      competitiveAnalysis: "Extra√ß√£o manual necess√°ria",
      marketingPotential: "Extra√ß√£o manual necess√°ria",
      financialAnalysis: "Extra√ß√£o manual necess√°ria",
      risks: ["Resposta n√£o estruturada adequadamente"],
      recommendations: ["Revisar manualmente a an√°lise completa"],
      rawResponse: response
    };
  }
}

/**
 * Fase 8: Sistema Multi-Shopify para Replica√ß√£o de Produtos
 * Status: ‚è±Ô∏è Pendente (Alta Prioridade)
 */
class MultiShopifySystem {
  constructor() {
    this.shopifyConnector = new ShopifyConnector();
    this.storeRepository = new StoreRepository();
    this.marketAdaptationSystem = new CrossMarketAdaptationSystem();
    this.claudeAPI = new ClaudeIntegrationAPI();
  }

  async initialize() {
    console.log("Inicializando Sistema Multi-Shopify...");
    
    try {
      // Inicializar conex√£o com Shopify
      await this.shopifyConnector.initialize();
      
      // Inicializar reposit√≥rio de lojas
      await this.storeRepository.initialize();
      
      // Inicializar sistema de adapta√ß√£o de mercado
      await this.marketAdaptationSystem.initialize();
      
      console.log("Sistema Multi-Shopify inicializado com sucesso");
      return true;
    } catch (error) {
      console.error("Erro na inicializa√ß√£o do Sistema Multi-Shopify:", error);
      return false;
    }
  }

  /**
   * Conecta uma nova loja Shopify
   */
  async connectStore(storeUrl, accessToken, storeName) {
    console.log(`Conectando loja Shopify: ${storeUrl}`);
    
    try {
      // Validar conex√£o
      const storeInfo = await this.shopifyConnector.validateConnection(storeUrl, accessToken);
      
      // Registrar loja no sistema
      const store = {
        id: uuidv4(),
        url: storeUrl,
        accessToken,
        name: storeName || storeInfo.name,
        currency: storeInfo.currency,
        country: storeInfo.country,
        language: storeInfo.primaryLocale,
        connectedAt: new Date(),
        status: 'active'
      };
      
      await this.storeRepository.saveStore(store);
      
      console.log(`Loja Shopify conectada com sucesso: ${store.name}`);
      return {
        storeId: store.id,
        storeName: store.name,
        currency: store.currency,
        country: store.country
      };
    } catch (error) {
      console.error(`Erro ao conectar loja Shopify ${storeUrl}:`, error);
      throw error;
    }
  }

  /**
   * Replica um produto para m√∫ltiplas lojas Shopify
   */
  async replicateProduct(productOpportunityId, targetStoreIds = []) {
    console.log(`Replicando produto para lojas Shopify: ${productOpportunityId}`);
    
    try {
      // Obter dados da oportunidade
      const opportunity = await this.opportunityRepository.getById(productOpportunityId);
      if (!opportunity) {
        throw new Error(`Oportunidade n√£o encontrada: ${productOpportunityId}`);
      }
      
      // Se n√£o foram especificadas lojas alvo, usar todas as lojas ativas
      if (!targetStoreIds || targetStoreIds.length === 0) {
        const activeStores = await this.storeRepository.getActiveStores();
        targetStoreIds = activeStores.map(store => store.id);
      }
      
      // Verificar lojas alvo
      const targetStores = await this.storeRepository.getStoresByIds(targetStoreIds);
      if (targetStores.length === 0) {
        throw new Error("Nenhuma loja alvo v√°lida encontrada");
      }
      
      console.log(`Replicando produto para ${targetStores.length} lojas Shopify`);
      
      // Resultados da replica√ß√£o
      const replicationResults = [];
      
      // Replicar para cada loja
      for (const store of targetStores) {
        console.log(`Replicando para loja: ${store.name}`);
        
        try {
          // Adaptar produto para o mercado da loja
          const adaptedProduct = await this.adaptProductForMarket(
            opportunity, 
            store
          );
          
          // Criar produto na loja Shopify
          const shopifyProduct = await this.shopifyConnector.createProduct(
            store.url,
            store.accessToken,
            adaptedProduct
          );
          
          // Registrar resultado da replica√ß√£o
          replicationResults.push({
            storeId: store.id,
            storeName: store.name,
            productId: shopifyProduct.id,
            productUrl: `https://${store.url}/products/${shopifyProduct.handle}`,
            status: 'success',
            timestamp: new Date()
          });
          
          console.log(`Produto replicado com sucesso para ${store.name}: ${shopifyProduct.title}`);
        } catch (error) {
          console.error(`Erro ao replicar para loja ${store.name}:`, error);
          
          // Registrar falha
          replicationResults.push({
            storeId: store.id,
            storeName: store.name,
            status: 'error',
            error: error.message,
            timestamp: new Date()
          });
        }
      }
      
      // Atualizar a oportunidade com os resultados de replica√ß√£o
      opportunity.replicationResults = replicationResults;
      opportunity.lastReplicationDate = new Date();
      await this.opportunityRepository.update(opportunity);
      
      // Retornar resultados
      return {
        opportunityId: productOpportunityId,
        totalStores: targetStores.length,
        successCount: replicationResults.filter(r => r.status === 'success').length,
        failureCount: replicationResults.filter(r => r.status === 'error').length,
        results: replicationResults
      };
    } catch (error) {
      console.error(`Erro na replica√ß√£o de produto ${productOpportunityId}:`, error);
      throw error;
    }
  }

  /**
   * Adapta um produto para um mercado espec√≠fico
   */
  async adaptProductForMarket(opportunity, store) {
    console.log(`Adaptando produto para mercado: ${store.country}`);
    
    try {
      // Obter dados do produto original
      const originalProduct = opportunity.sourceData.product;
      
      // Obter informa√ß√µes do mercado alvo
      const targetMarket = await this.marketRepository.getMarketData(store.country);
      
      // Construir prompt para a Claude gerar adapta√ß√µes
      const adaptationPrompt = this.buildMarketAdaptationPrompt(
        originalProduct,
        targetMarket,
        store
      );
      
      // Obter adapta√ß√µes da Claude 3.7 Sonnet
      const claudeResponse = await this.claudeAPI.generate(adaptationPrompt);
      
      // Processar resposta
      const adaptations = this.processAdaptationResponse(claudeResponse);
      
      // Construir produto adaptado
      const adaptedProduct = {
        title: adaptations.title || originalProduct.title,
        body_html: adaptations.description || originalProduct.description,
        vendor: originalProduct.vendor,
        product_type: originalProduct.product_type,
        tags: adaptations.tags || originalProduct.tags,
        variants: this.adaptVariants(originalProduct.variants, adaptations, store),
        images: originalProduct.images,
        metafields: this.createMetafields(adaptations, opportunity)
      };
      
      return adaptedProduct;
    } catch (error) {
      console.error(`Erro ao adaptar produto para mercado ${store.country}:`, error);
      throw error;
    }
  }

  /**
   * Constr√≥i o prompt para adapta√ß√£o de mercado
   */
  buildMarketAdaptationPrompt(product, targetMarket, store) {
    return {
      system: `
        Voc√™ √© um especialista em adapta√ß√£o de produtos para diferentes mercados internacionais,
        treinado nas metodologias de Gianluca Binelli (Cultural Context Matrix), Nicolas Gendron (Feed
        Localization Matrix) e Paul Lee (Geo-Specific Trend Analysis).
        
        Sua tarefa √© adaptar produtos para mercados espec√≠ficos considerando:
        1. Valores culturais (individualismo vs. coletivismo)
        2. Comunica√ß√£o direta vs. indireta
        3. Sazonalidade regional espec√≠fica
        4. Sensibilidade a pre√ßo por regi√£o
        5. Terminologia espec√≠fica regional
        6. Conven√ß√µes locais de formato e categoriza√ß√£o
        
        Forne√ßa adapta√ß√µes espec√≠ficas do produto para o mercado alvo.
      `,
      user: `
        Adapte o seguinte produto para o mercado de ${store.country} (${store.language}):
        
        PRODUTO ORIGINAL:
        ${JSON.stringify(product, null, 2)}
        
        MERCADO ALVO:
        ${JSON.stringify(targetMarket, null, 2)}
        
        INFORMA√á√ïES DA LOJA:
        - Pa√≠s: ${store.country}
        - Idioma: ${store.language}
        - Moeda: ${store.currency}
        
        Forne√ßa as seguintes adapta√ß√µes em formato JSON:
        - title: t√≠tulo adaptado (m√°ximo 60 caracteres)
        - description: descri√ß√£o HTML adaptada
        - tags: tags relevantes para o mercado local
        - price_adjustment: ajuste percentual de pre√ßo recomendado
        - unique_selling_points: pontos de venda √∫nicos para este mercado
        - cultural_insights: insights culturais relevantes
        - seasonal_recommendations: recomenda√ß√µes sazonais
      `
    };
  }

  /**
   * Processa a resposta de adapta√ß√£o
   */
  processAdaptationResponse(claudeResponse) {
    try {
      // Extrair a parte JSON da resposta
      const jsonMatch = claudeResponse.match(/```json\n([\s\S]*?)\n```/) ||
                       claudeResponse.match(/\{[\s\S]*\}/);
      
      if (jsonMatch) {
        return JSON.parse(jsonMatch[1] || jsonMatch[0]);
      } else {
        // Fallback para estrutura√ß√£o manual se o formato JSON n√£o for seguido
        return this.structureUnformattedAdaptationResponse(claudeResponse);
      }
    } catch (error) {
      console.error("Erro ao processar resposta de adapta√ß√£o:", error);
      
      // Retornar um objeto estruturado mesmo em caso de erro
      return {
        title: null,
        description: null,
        tags: [],
        price_adjustment: 0,
        unique_selling_points: [],
        cultural_insights: [],
        seasonal_recommendations: []
      };
    }
  }

  /**
   * Estrutura uma resposta n√£o formatada de adapta√ß√£o
   */
  structureUnformattedAdaptationResponse(response) {
    // Extrair partes relevantes da resposta n√£o estruturada
    const titleMatch = response.match(/t√≠tulo[:\s]+(.*?)(?=\n\n|\n[A-Z])/i);
    const priceMatch = response.match(/ajuste[:\s]+([\d\.\+\-\%]+)/i);
    
    // Compilar em um objeto estruturado
    return {
      title: titleMatch ? titleMatch[1].trim() : null,
      description: null,
      tags: [],
      price_adjustment: priceMatch ? parseFloat(priceMatch[1]) : 0,
      unique_selling_points: [],
      cultural_insights: [],
      seasonal_recommendations: []
    };
  }

  /**
   * Adapta variantes para o mercado alvo
   */
  adaptVariants(originalVariants, adaptations, store) {
    return originalVariants.map(variant => {
      // Aplicar ajuste de pre√ßo
      let price = variant.price;
      if (adaptations.price_adjustment) {
        const adjustment = parseFloat(adaptations.price_adjustment);
        if (!isNaN(adjustment)) {
          if (adaptations.price_adjustment.includes('%')) {
            price = price * (1 + adjustment / 100);
          } else {
            price = price * (1 + adjustment);
          }
        }
      }
      
      // Arredondar pre√ßo de acordo com conven√ß√µes da moeda
      price = this.roundPriceForCurrency(price, store.currency);
      
      return {
        ...variant,
        price: price.toString()
      };
    });
  }

  /**
   * Arredonda pre√ßo de acordo com conven√ß√µes da moeda
   */
  roundPriceForCurrency(price, currency) {
    switch (currency) {
      case 'USD':
      case 'EUR':
      case 'GBP':
        // Arredondar para .99 ou .95
        return Math.floor(price) + 0.99;
      case 'JPY':
        // N√£o usar decimais
        return Math.floor(price);
      case 'BRL':
        // Arredondar para .90 ou .99
        return Math.floor(price) + 0.90;
      default:
        // Arredondar para duas casas decimais
        return Math.round(price * 100) / 100;
    }
  }

  /**
   * Cria metafields para o produto adaptado
   */
  createMetafields(adaptations, opportunity) {
    const metafields = [];
    
    // Adicionar pontos de venda √∫nicos
    if (adaptations.unique_selling_points && adaptations.unique_selling_points.length > 0) {
      metafields.push({
        namespace: 'drophunter',
        key: 'unique_selling_points',
        value: JSON.stringify(adaptations.unique_selling_points),
        type: 'json_string'
      });
    }
    
    // Adicionar insights culturais
    if (adaptations.cultural_insights && adaptations.cultural_insights.length > 0) {
      metafields.push({
        namespace: 'drophunter',
        key: 'cultural_insights',
        value: JSON.stringify(adaptations.cultural_insights),
        type: 'json_string'
      });
    }
    
    // Adicionar recomenda√ß√µes sazonais
    if (adaptations.seasonal_recommendations && adaptations.seasonal_recommendations.length > 0) {
      metafields.push({
        namespace: 'drophunter',
        key: 'seasonal_recommendations',
        value: JSON.stringify(adaptations.seasonal_recommendations),
        type: 'json_string'
      });
    }
    
    // Adicionar ID da oportunidade original
    metafields.push({
      namespace: 'drophunter',
      key: 'opportunity_id',
      value: opportunity.id,
      type: 'single_line_text'
    });
    
    return metafields;
  }
}

/**
 * Fase 9: Est√∫dio de Criativos para Campanhas
 * Status: ‚è±Ô∏è Pendente (Alta Prioridade)
 */
class CreativeStudioSystem {
  constructor() {
    this.claudeAPI = new ClaudeIntegrationAPI();
    this.copywritingSystem = new HighConversionCopywritingSystem();
    this.assetRepository = new AssetRepository();
    this.campaignSystem = new CampaignImplementationSystem();
  }

  async initialize() {
    console.log("Inicializando Est√∫dio de Criativos...");
    
    try {
      // Inicializar sistema de copywriting
      await this.copywritingSystem.initialize();
      
      // Inicializar reposit√≥rio de assets
      await this.assetRepository.initialize();
      
      console.log("Est√∫dio de Criativos inicializado com sucesso");
      return true;
    } catch (error) {
      console.error("Erro na inicializa√ß√£o do Est√∫dio de Criativos:", error);
      return false;
    }
  }

  /**
   * Gera um briefing criativo completo para uma oportunidade
   */
  async generateCreativeBriefing(opportunityId) {
    console.log(`Gerando briefing criativo para oportunidade: ${opportunityId}`);
    
    try {
      // Obter dados da oportunidade
      const opportunity = await this.opportunityRepository.getById(opportunityId);
      if (!opportunity) {
        throw new Error(`Oportunidade n√£o encontrada: ${opportunityId}`);
      }
      
      // Obter dados do produto e an√°lise
      const product = opportunity.sourceData.product;
      const analysis = opportunity.aiAnalysis;
      
      // Definir audi√™ncia alvo
      const targetAudience = analysis.targetAudience || {
        demographics: "Adultos 25-45 anos",
        interests: ["Consumidores conscientes", "Entusiastas de tecnologia"],
        painPoints: ["Falta de tempo", "Preocupa√ß√£o com qualidade"]
      };
      
      // Obter canal de marketing recomendado
      const marketingChannel = opportunity.campaignType || "Performance Max";
      
      // Construir prompt para a Claude
      const briefingPrompt = this.buildCreativeBriefingPrompt(
        product,
        targetAudience,
        marketingChannel,
        opportunity
      );
      
      // Obter briefing da Claude 3.7 Sonnet
      const claudeResponse = await this.claudeAPI.generate(briefingPrompt);
      
      // Processar resposta
      const creativeBriefing = this.processCreativeBriefingResponse(claudeResponse);
      
      // Gerar recomenda√ß√µes de assets baseadas no briefing
      const assetRecommendations = await this.generateAssetRecommendations(
        creativeBriefing,
        marketingChannel
      );
      
      // Criar briefing completo
      const completeBriefing = {
        id: uuidv4(),
        opportunityId: opportunityId,
        productName: product.title,
        targetAudience,
        marketingChannel,
        creativeConcept: creativeBriefing.creativeConcept,
        keyMessages: creativeBriefing.keyMessages,
        visualGuidelines: creativeBriefing.visualGuidelines,
        copyGuidelines: creativeBriefing.copyGuidelines,
        emotionalTriggers: creativeBriefing.emotionalTriggers,
        assetRecommendations,
        createdAt: new Date()
      };
      
      // Salvar briefing
      await this.assetRepository.saveCreativeBriefing(completeBriefing);
      
      console.log(`Briefing criativo gerado com sucesso para ${product.title}`);
      return completeBriefing;
    } catch (error) {
      console.error(`Erro ao gerar briefing criativo ${opportunityId}:`, error);
      throw error;
    }
  }

  /**
   * Constr√≥i o prompt para briefing criativo
   */
  buildCreativeBriefingPrompt(product, audience, channel, opportunity) {
    return {
      system: `
        Voc√™ √© um especialista em cria√ß√£o de briefings criativos, treinado nas metodologias de Talia Wolf (Emotion-Based CRO), Amy Hebdon (Visual First Framework) e Tom Breeze (AIDA Framework + Emotional Resolution Advertising).

        Sua tarefa √© criar briefings criativos completos considerando:
        1. Motiva√ß√µes emocionais profundas do cliente
        2. Gatilhos emocionais espec√≠ficos para segmentos
        3. Design baseado em psicologia comportamental
        4. Hierarquia visual para m√°ximo impacto
        
        Voc√™ deve identificar:
        - Conceito criativo central
        - Mensagens-chave e hierarquia
        - Diretrizes visuais espec√≠ficas (cores, imagens, layout)
        - Diretrizes de copy (tom, vocabul√°rio, gatilhos)
        - Gatilhos emocionais a serem utilizados
        
        Crie um briefing completo que unifica emo√ß√£o e estrutura visual.
      `,
      user: `
        Crie um briefing criativo completo para o seguinte produto, considerando a audi√™ncia e canal de marketing:
        
        PRODUTO:
        ${JSON.stringify(product, null, 2)}
        
        P√öBLICO-ALVO:
        ${JSON.stringify(audience, null, 2)}
        
        CANAL DE MARKETING:
        ${channel}
        
        INFORMA√á√ïES ADICIONAIS:
        - Pontos de venda √∫nicos: ${JSON.stringify(opportunity.aiAnalysis.uniqueSellingPoints || [], null, 2)}
        - Potencial de marketing: ${opportunity.aiAnalysis.marketingPotential || 'N√£o dispon√≠vel'}
        
        Forne√ßa um briefing criativo completo em formato JSON com os seguintes campos:
        - creativeConcept: conceito criativo central
        - keyMessages: array de mensagens-chave em ordem de prioridade
        - visualGuidelines: diretrizes visuais detalhadas (cores, imagens, layout)
        - copyGuidelines: diretrizes de copywriting (tom, vocabul√°rio, estrutura)
        - emotionalTriggers: gatilhos emocionais a serem utilizados
      `
    };
  }

  /**
   * Processa a resposta do briefing criativo
   */
  processCreativeBriefingResponse(claudeResponse) {
    try {
      // Extrair a parte JSON da resposta
      const jsonMatch = claudeResponse.match(/```json\n([\s\S]*?)\n```/) ||
                       claudeResponse.match(/\{[\s\S]*\}/);
      
      if (jsonMatch) {
        return JSON.parse(jsonMatch[1] || jsonMatch[0]);
      } else {
        // Fallback para estrutura√ß√£o manual se o formato JSON n√£o for seguido
        return this.structureUnformattedBriefingResponse(claudeResponse);
      }
    } catch (error) {
      console.error("Erro ao processar resposta de briefing criativo:", error);
      
      // Retornar um objeto estruturado mesmo em caso de erro
      return {
        creativeConcept: "Erro ao processar resposta da IA",
        keyMessages: [],
        visualGuidelines: {},
        copyGuidelines: {},
        emotionalTriggers: []
      };
    }
  }

  /**
   * Estrutura uma resposta n√£o formatada de briefing
   */
  structureUnformattedBriefingResponse(response) {
    // Extrair partes relevantes da resposta n√£o estruturada
    const conceptMatch = response.match(/conceito[:\s]+(.*?)(?=\n\n|\n[A-Z])/i);
    
    // Compilar em um objeto estruturado
    return {
      creativeConcept: conceptMatch ? conceptMatch[1].trim() : "Extra√ß√£o manual necess√°ria",
      keyMessages: ["Resposta n√£o estruturada adequadamente"],
      visualGuidelines: {
        colorPalette: "Extra√ß√£o manual necess√°ria",
        imageStyle: "Extra√ß√£o manual necess√°ria",
        layout: "Extra√ß√£o manual necess√°ria"
      },
      copyGuidelines: {
        tone: "Extra√ß√£o manual necess√°ria",
        vocabulary: "Extra√ß√£o manual necess√°ria",
        structure: "Extra√ß√£o manual necess√°ria"
      },
      emotionalTriggers: ["Extra√ß√£o manual necess√°ria"],
      rawResponse: response
    };
  }

  /**
   * Gera recomenda√ß√µes de assets baseadas no briefing
   */
  async generateAssetRecommendations(briefing, channel) {
    // Definir recomenda√ß√µes espec√≠ficas por canal
    const channelRequirements = this.getChannelRequirements(channel);
    
    // Construir recomenda√ß√µes de assets
    return {
      textAssets: this.generateTextAssetRecommendations(briefing, channelRequirements),
      imageAssets: this.generateImageAssetRecommendations(briefing, channelRequirements),
      videoAssets: this.generateVideoAssetRecommendations(briefing, channelRequirements)
    };
  }

  /**
   * Obt√©m requisitos espec√≠ficos por canal
   */
  getChannelRequirements(channel) {
    const requirements = {
      "Performance Max": {
        headlines: { count: 15, maxLength: 30 },
        descriptions: { count: 4, maxLength: 90 },
        images: { formats: ["1:1", "1.91:1", "4:5"], count: 20 },
        videos: { optional: false, count: 5, lengths: [15, 30, 60] }
      },
      "Search": {
        headlines: { count: 15, maxLength: 30 },
        descriptions: { count: 4, maxLength: 90 },
        images: { formats: [], count: 0 },
        videos: { optional: true, count: 0, lengths: [] }
      },
      "Display": {
        headlines: { count: 5, maxLength: 25 },
        descriptions: { count: 5, maxLength: 90 },
        images: { formats: ["1:1", "1.91:1", "4:5", "320x50", "728x90"], count: 15 },
        videos: { optional: true, count: 0, lengths: [] }
      },
      "YouTube": {
        headlines: { count: 5, maxLength: 25 },
        descriptions: { count: 5, maxLength: 90 },
        images: { formats: ["16:9"], count: 3 },
        videos: { optional: false, count: 5, lengths: [15, 30, 60, 120] }
      },
      "Facebook": {
        headlines: { count: 5, maxLength: 40 },
        descriptions: { count: 5, maxLength: 125 },
        images: { formats: ["1:1", "1.91:1", "4:5"], count: 10 },
        videos: { optional: false, count: 3, lengths: [15, 30, 60] }
      }
    };
    
    return requirements[channel] || requirements["Performance Max"];
  }

  /**
   * Gera recomenda√ß√µes de assets de texto
   */
  generateTextAssetRecommendations(briefing, channelRequirements) {
    // Gerar recomenda√ß√µes para headlines
    const headlineRecommendations = {
      count: channelRequirements.headlines.count,
      maxLength: channelRequirements.headlines.maxLength,
      suggestions: [
        "Gere headlines que incorporem os seguintes elementos:",
        "- Benef√≠cio principal do produto",
        "- Gatilho emocional identificado",
        "- USP (Unique Selling Proposition)",
        "- Foco nas dores do cliente"
      ],
      structures: [
        `[Benef√≠cio] para [Audi√™ncia Target]`,
        `Como [Produto] [Resolve Problema]`,
        `[Emo√ß√£o]: [Produto] para [Audi√™ncia]`,
        `[Pergunta que Desperta Interesse]?`,
        `[Estat√≠stica Impressionante] com [Produto]`
      ],
      examples: this.generateHeadlineExamples(briefing, channelRequirements.headlines.maxLength)
    };
    
    // Gerar recomenda√ß√µes para descri√ß√µes
    const descriptionRecommendations = {
      count: channelRequirements.descriptions.count,
      maxLength: channelRequirements.descriptions.maxLength,
      suggestions: [
        "Gere descri√ß√µes que incorporem os seguintes elementos:",
        "- Expans√£o dos benef√≠cios mencionados no headline",
        "- Prova social ou valida√ß√£o",
        "- Call to action claro",
        "- Senso de urg√™ncia"
      ],
      structures: [
        `[Problema] √© comum. [Produto] oferece [Solu√ß√£o] atrav√©s de [Benef√≠cio].`,
        `[Audi√™ncia] est√° descobrindo que [Produto] proporciona [Benef√≠cio]. [Call to Action].`,
        `[Benef√≠cio Principal]. [Benef√≠cio Secund√°rio]. [Prova]. [Call to Action].`
      ],
      examples: this.generateDescriptionExamples(briefing, channelRequirements.descriptions.maxLength)
    };
    
    return {
      headlines: headlineRecommendations,
      descriptions: descriptionRecommendations
    };
  }

  /**
   * Gera exemplos de headlines
   */
  generateHeadlineExamples(briefing, maxLength) {
    // Baseado no briefing, gerar exemplos de headlines
    const examples = [];
    
    // Usar as mensagens-chave do briefing para inspirar headlines
    if (briefing.keyMessages && briefing.keyMessages.length > 0) {
      briefing.keyMessages.slice(0, 3).forEach(message => {
        // Converter mensagem em headline
        let headline = message;
        if (headline.length > maxLength) {
          headline = headline.substring(0, maxLength - 3) + '...';
        }
        examples.push(headline);
      });
    }
    
    // Usar gatilhos emocionais para gerar headlines adicionais
    if (briefing.emotionalTriggers && briefing.emotionalTriggers.length > 0) {
      briefing.emotionalTriggers.slice(0, 2).forEach(trigger => {
        const headline = `${trigger} com ${briefing.creativeConcept.split(' ').slice(0, 3).join(' ')}`;
        examples.push(headline.substring(0, maxLength));
      });
    }
    
    // Se n√£o houver exemplos suficientes, adicionar alguns gen√©ricos
    while (examples.length < 5) {
      examples.push(`Headline exemplo ${examples.length + 1} (max ${maxLength} caracteres)`);
    }
    
    return examples;
  }

  /**
   * Gera exemplos de descri√ß√µes
   */
  generateDescriptionExamples(briefing, maxLength) {
    // Baseado no briefing, gerar exemplos de descri√ß√µes
    const examples = [];
    
    // Combinar conceito criativo com mensagens-chave
    if (briefing.keyMessages && briefing.keyMessages.length > 0 && briefing.creativeConcept) {
      const description = `${briefing.creativeConcept}. ${briefing.keyMessages[0]}. Descubra hoje mesmo.`;
      examples.push(description.substring(0, maxLength));
    }
    
    // Usar diretrizes de copy para inspirar uma descri√ß√£o
    if (briefing.copyGuidelines && briefing.copyGuidelines.tone) {
      const description = `Nosso produto oferece qualidade premium com resultados garantidos. Experimente agora e sinta a diferen√ßa.`;
      examples.push(description.substring(0, maxLength));
    }
    
    // Se n√£o houver exemplos suficientes, adicionar alguns gen√©ricos
    while (examples.length < 3) {
      examples.push(`Descri√ß√£o exemplo ${examples.length + 1} (max ${maxLength} caracteres)`);
    }
    
    return examples;
  }

  /**
   * Gera recomenda√ß√µes de assets de imagem
   */
  generateImageAssetRecommendations(briefing, channelRequirements) {
    // Se o canal n√£o requer imagens, retornar objeto vazio
    if (channelRequirements.images.count === 0) {
      return {
        required: false,
        message: "Este canal n√£o requer assets de imagem."
      };
    }
    
    // Extrair diretrizes visuais do briefing
    const visualGuidelines = briefing.visualGuidelines || {};
    
    // Gerar recomenda√ß√µes para imagens
    return {
      required: true,
      count: channelRequirements.images.count,
      formats: channelRequirements.images.formats,
      colorPalette: visualGuidelines.colorPalette || "De acordo com a identidade visual da marca",
      imageStyles: visualGuidelines.imageStyle || "Imagens profissionais de alta qualidade",
      compositions: [
        "Produto em uso (mostrando benef√≠cios)",
        "Close-up do produto (destacando caracter√≠sticas)",
        "Antes e depois (demonstrando resultados)",
        "Lifestyle (produto no contexto do usu√°rio)",
        "Testemunhos (pessoas reais usando o produto)"
      ],
      guidelines: [
        "Manter consist√™ncia visual em todas as imagens",
        "Garantir que o produto seja claramente vis√≠vel",
        "Usar espa√ßo negativo para destacar o produto",
        "Incorporar elementos que evoquem emo√ß√µes identificadas",
        "Considerar a hierarquia visual para guiar o olhar"
      ],
      examples: [
        `Formato ${channelRequirements.images.formats[0] || "1:1"}: Produto em uso por pessoa que representa o p√∫blico-alvo`,
        `Formato ${channelRequirements.images.formats[1] || "1.91:1"}: Visual do produto destacando principais features`
      ]
    };
  }

  /**
   * Gera recomenda√ß√µes de assets de v√≠deo
   */
  generateVideoAssetRecommendations(briefing, channelRequirements) {
    // Se o canal n√£o requer v√≠deos, retornar objeto informando que √© opcional
    if (channelRequirements.videos.optional) {
      return {
        required: false,
        optional: true,
        message: "V√≠deos s√£o opcionais para este canal, mas podem melhorar a performance da campanha."
      };
    }
    
    // Extrair diretrizes relevantes do briefing
    const visualGuidelines = briefing.visualGuidelines || {};
    const copyGuidelines = briefing.copyGuidelines || {};
    
    // Gerar recomenda√ß√µes para v√≠deos
    return {
      required: true,
      count: channelRequirements.videos.count,
      recommendedLengths: channelRequirements.videos.lengths,
      structure: [
        "Hook (0-3s): Capturar aten√ß√£o imediatamente",
        "Problema (3-5s): Apresentar a dor/necessidade",
        "Solu√ß√£o (5-10s): Introduzir o produto como solu√ß√£o",
        "Prova (10-15s): Demonstrar benef√≠cios/resultados",
        "CTA (15-final): Call to action claro"
      ],
      visualStyle: visualGuidelines.videoStyle || "Consistente com as diretrizes visuais da marca",
      audioGuidelines: [
        "M√∫sica: Alinhada com o tom emocional da campanha",
        "Narra√ß√£o: Voz que ressoa com o p√∫blico-alvo",
        "Efeitos sonoros: Usados com modera√ß√£o para enfatizar pontos-chave"
      ],
      scriptGuidelines: [
        `Tom: ${copyGuidelines.tone || "Profissional mas acess√≠vel"}`,
        "Estrutura: Seguir formato AIDA (Aten√ß√£o, Interesse, Desejo, A√ß√£o)",
        "Mensagens-chave: Incorporar as principais mensagens identificadas"
      ],
      examples: [
        `V√≠deo de ${channelRequirements.videos.lengths[0]}s: Foco no benef√≠cio principal com CTA r√°pido`,
        `V√≠deo de ${channelRequirements.videos.lengths[1]}s: Demonstra√ß√£o do produto resolvendo problema espec√≠fico`
      ]
    };
  }

  /**
   * Gera assets criativos para uma campanha
   */
  async generateCreativeAssets(briefingId) {
    console.log(`Gerando assets criativos a partir do briefing: ${briefingId}`);
    
    try {
      // Obter briefing criativo
      const briefing = await this.assetRepository.getBriefingById(briefingId);
      if (!briefing) {
        throw new Error(`Briefing n√£o encontrado: ${briefingId}`);
      }
      
      // Obter oportunidade relacionada
      const opportunity = await this.opportunityRepository.getById(briefing.opportunityId);
      if (!opportunity) {
        throw new Error(`Oportunidade n√£o encontrada: ${briefing.opportunityId}`);
      }
      
      // Gerar copy para campanha
      const copyAssets = await this.generateCopyAssets(briefing, opportunity);
      
      // Criar registro de assets
      const creativeAssets = {
        id: uuidv4(),
        briefingId: briefingId,
        opportunityId: briefing.opportunityId,
        copyAssets,
        createdAt: new Date(),
        status: 'completed'
      };
      
      // Salvar assets
      await this.assetRepository.saveCreativeAssets(creativeAssets);
      
      console.log(`Assets criativos gerados com sucesso para briefing ${briefingId}`);
      return creativeAssets;
    } catch (error) {
      console.error(`Erro ao gerar assets criativos ${briefingId}:`, error);
      throw error;
    }
  }

  /**
   * Gera assets de copy para campanha
   */
  async generateCopyAssets(briefing, opportunity) {
    console.log(`Gerando copy para campanha baseado no briefing...`);
    
    try {
      // Obter produto e audi√™ncia
      const product = opportunity.sourceData.product;
      const audience = briefing.targetAudience;
      
      // Determinar canal
      const channel = briefing.marketingChannel.toLowerCase().replace(/\s+/g, '_');
      
      // Obter requisitos do canal
      const channelRequirements = this.getChannelRequirements(briefing.marketingChannel);
      
      // Construir prompt para a Claude
      const copyPrompt = this.buildCopyPrompt(
        briefing,
        product,
        audience,
        channel,
        channelRequirements
      );
      
      // Obter copy da Claude 3.7 Sonnet
      const claudeResponse = await this.claudeAPI.generate(copyPrompt);
      
      // Processar resposta
      const copyAssets = this.processCopyResponse(claudeResponse);
      
      // Validar assets gerados
      this.validateCopyAssets(copyAssets, channelRequirements);
      
      return copyAssets;
    } catch (error) {
      console.error("Erro ao gerar copy para campanha:", error);
      throw error;
    }
  }

  /**
   * Constr√≥i o prompt para gera√ß√£o de copy
   */
  buildCopyPrompt(briefing, product, audience, channel, channelRequirements) {
    return {
      system: `
        Voc√™ √© um especialista em copywriting para campanhas de marketing digital, treinado nas metodologias de Joanna Wiebe (Message-to-Market Match), Eugene Schwartz (5 States of Awareness) e Stefan Georgi (RMBC Method).
        
        Sua tarefa √© criar copy estrat√©gico para campanhas de marketing digital seguindo:
        
        1. Message-to-Market Match: Usar linguagem do cliente para m√°xima resson√¢ncia
        2. 5 States of Awareness: Adaptar mensagem ao n√≠vel de consci√™ncia do p√∫blico
        3. RMBC Method: Estruturar copy em Resson√¢ncia, Mec√¢nica, Benef√≠cios e Call-to-action
        
        Crie copy que seja persuasivo, focado em benef√≠cios e otimizado para o canal espec√≠fico.
      `,
      user: `
        Crie copy para uma campanha de marketing baseada no seguinte briefing criativo:
        
        BRIEFING CRIATIVO:
        ${JSON.stringify(briefing, null, 2)}
        
        PRODUTO:
        ${JSON.stringify(product, null, 2)}
        
        P√öBLICO-ALVO:
        ${JSON.stringify(audience, null, 2)}
        
        CANAL DE MARKETING:
        ${briefing.marketingChannel}
        
        REQUISITOS ESPEC√çFICOS:
        - Headlines: ${channelRequirements.headlines.count} (m√°ximo ${channelRequirements.headlines.maxLength} caracteres cada)
        - Descri√ß√µes: ${channelRequirements.descriptions.count} (m√°ximo ${channelRequirements.descriptions.maxLength} caracteres cada)
        
        Forne√ßa o copy em formato JSON com os seguintes campos:
        - headlines: array de headlines (quantidade exata solicitada)
        - descriptions: array de descri√ß√µes (quantidade exata solicitada)
        - callToActions: array de 3-5 call-to-actions variados
        - usps: array de 3-5 unique selling points em formato conciso
      `
    };
  }

  /**
   * Processa a resposta de copy
   */
  processCopyResponse(claudeResponse) {
    try {
      // Extrair a parte JSON da resposta
      const jsonMatch = claudeResponse.match(/```json\n([\s\S]*?)\n```/) ||
                       claudeResponse.match(/\{[\s\S]*\}/);
      
      if (jsonMatch) {
        return JSON.parse(jsonMatch[1] || jsonMatch[0]);
      } else {
        // Fallback para estrutura√ß√£o manual
        return this.structureUnformattedCopyResponse(claudeResponse);
      }
    } catch (error) {
      console.error("Erro ao processar resposta de copy:", error);
      
      // Retornar um objeto estruturado mesmo em caso de erro
      return {
        headlines: ["Erro ao processar resposta da IA"],
        descriptions: ["Erro ao processar resposta da IA"],
        callToActions: ["Compre agora"],
        usps: ["Produto de qualidade"]
      };
    }
  }

  /**
   * Estrutura uma resposta n√£o formatada de copy
   */
  structureUnformattedCopyResponse(response) {
    // Procurar se√ß√µes espec√≠ficas na resposta
    const headlinesSection = response.match(/headline[s]?:?\s*\n([\s\S]*?)(?:\n\n|\n[A-Z])/i);
    const descriptionsSection = response.match(/descri[√ßpt][o√µ]e[s]?:?\s*\n([\s\S]*?)(?:\n\n|\n[A-Z])/i);
    const ctaSection = response.match(/call\s*to\s*actions?:?\s*\n([\s\S]*?)(?:\n\n|\n[A-Z])/i);
    const uspsSection = response.match(/u[sn]ps?:?\s*\n([\s\S]*?)(?:\n\n|\n[A-Z])/i);
    
    // Extrair headlines
    const headlines = headlinesSection
      ? headlinesSection[1].split('\n').map(line => {
          const cleaned = line.replace(/^[-*‚Ä¢\d.)\s]+/, '').trim();
          return cleaned || null;
        }).filter(Boolean)
      : ["Headline 1", "Headline 2", "Headline 3"];
    
    // Extrair descri√ß√µes
    const descriptions = descriptionsSection
      ? descriptionsSection[1].split('\n').map(line => {
          const cleaned = line.replace(/^[-*‚Ä¢\d.)\s]+/, '').trim();
          return cleaned || null;
        }).filter(Boolean)
      : ["Descri√ß√£o 1", "Descri√ß√£o 2"];
    
    // Extrair CTAs
    const callToActions = ctaSection
      ? ctaSection[1].split('\n').map(line => {
          const cleaned = line.replace(/^[-*‚Ä¢\d.)\s]+/, '').trim();
          return cleaned || null;
        }).filter(Boolean)
      : ["Compre agora", "Saiba mais", "Experimente hoje"];
    
    // Extrair USPs
    const usps = uspsSection
      ? uspsSection[1].split('\n').map(line => {
          const cleaned = line.replace(/^[-*‚Ä¢\d.)\s]+/, '').trim();
          return cleaned || null;
        }).filter(Boolean)
      : ["USP 1", "USP 2", "USP 3"];
    
    return {
      headlines,
      descriptions,
      callToActions,
      usps
    };
  }

  /**
   * Valida os assets de copy gerados
   */
  validateCopyAssets(copyAssets, channelRequirements) {
    // Validar quantidade de headlines
    if (copyAssets.headlines.length < channelRequirements.headlines.count) {
      console.warn(`Alerta: N√∫mero insuficiente de headlines. Esperado: ${channelRequirements.headlines.count}, Recebido: ${copyAssets.headlines.length}`);
    }
    
    // Validar tamanho dos headlines
    copyAssets.headlines.forEach((headline, index) => {
      if (headline.length > channelRequirements.headlines.maxLength) {
        console.warn(`Alerta: Headline ${index + 1} excede o tamanho m√°ximo. Esperado: ${channelRequirements.headlines.maxLength}, Atual: ${headline.length}`);
        // Truncar headline
        copyAssets.headlines[index] = headline.substring(0, channelRequirements.headlines.maxLength - 3) + '...';
      }
    });
    
    // Validar quantidade de descri√ß√µes
    if (copyAssets.descriptions.length < channelRequirements.descriptions.count) {
      console.warn(`Alerta: N√∫mero insuficiente de descri√ß√µes. Esperado: ${channelRequirements.descriptions.count}, Recebido: ${copyAssets.descriptions.length}`);
    }
    
    // Validar tamanho das descri√ß√µes
    copyAssets.descriptions.forEach((description, index) => {
      if (description.length > channelRequirements.descriptions.maxLength) {
        console.warn(`Alerta: Descri√ß√£o ${index + 1} excede o tamanho m√°ximo. Esperado: ${channelRequirements.descriptions.maxLength}, Atual: ${description.length}`);
        // Truncar descri√ß√£o
        copyAssets.descriptions[index] = description.substring(0, channelRequirements.descriptions.maxLength - 3) + '...';
      }
    });
    
    // Validar CTAs
    if (!copyAssets.callToActions || copyAssets.callToActions.length < 3) {
      console.warn(`Alerta: N√∫mero insuficiente de CTAs. Esperado: pelo menos 3, Recebido: ${copyAssets.callToActions?.length || 0}`);
    }
    
    // Validar USPs
    if (!copyAssets.usps || copyAssets.usps.length < 3) {
      console.warn(`Alerta: N√∫mero insuficiente de USPs. Esperado: pelo menos 3, Recebido: ${copyAssets.usps?.length || 0}`);
    }
  }
}
Implementa√ß√£o da Integra√ß√£o Remotion para o DropHunter
Com base no documento de atualiza√ß√£o, vou implementar a nova Fase 9.5 para o sistema DropHunter, focando na integra√ß√£o de renderiza√ß√£o de v√≠deo do Remotion. Isso completar√° o pipeline de automa√ß√£o, desde a descoberta de oportunidades at√© a implementa√ß√£o da campanha.
1. Componente React para o Renderizador de V√≠deo Remotion
Vamos primeiro criar um componente React que ser√° adicionado √† interface do DropHunter para gerenciar a renderiza√ß√£o de v√≠deo:
jsximport React, { useState, useEffect } from 'react';
import { 
  Film, 
  Layers, 
  CheckCircle, 
  Clock, 
  AlertCircle,
  RefreshCw,
  Monitor,
  Download,
  PlayCircle,
  List
} from 'lucide-react';

const RemotionVideoRenderer = ({ opportunityId, briefingId, campaignType }) => {
  const [renderStatus, setRenderStatus] = useState('idle'); // idle, queued, rendering, completed, error
  const [templates, setTemplates] = useState([]);
  const [selectedTemplate, setSelectedTemplate] = useState(null);
  const [renderProgress, setRenderProgress] = useState(0);
  const [renderJob, setRenderJob] = useState(null);
  const [videoUrl, setVideoUrl] = useState(null);
  const [errorMessage, setErrorMessage] = useState(null);
  
  // Buscar templates dispon√≠veis ao montar o componente
  useEffect(() => {
    const fetchTemplates = async () => {
      try {
        // Em uma implementa√ß√£o real, isso buscaria de uma API
        const availableTemplates = [
          { id: 'performance-max', name: 'V√≠deo Performance Max', formats: ['16:9', '1:1', '9:16'], duration: 30 },
          { id: 'youtube-shorts', name: 'YouTube Shorts', formats: ['9:16'], duration: 60 },
          { id: 'tiktok', name: 'Estilo TikTok', formats: ['9:16'], duration: 15 },
          { id: '3d-product', name: 'Apresenta√ß√£o 3D do Produto', formats: ['16:9', '1:1'], duration: 20 },
          { id: 'text-to-speech', name: 'Apresenta√ß√£o Narrada', formats: ['16:9'], duration: 45 }
        ];
        
        setTemplates(availableTemplates);
        
        // Auto-sele√ß√£o de template com base no tipo de campanha
        const defaultTemplate = campaignType === 'Performance Max' ? 'performance-max' : 
                               campaignType === 'YouTube' ? 'youtube-shorts' :
                               campaignType === 'TikTok' ? 'tiktok' : 'performance-max';
                               
        setSelectedTemplate(defaultTemplate);
      } catch (error) {
        console.error('Erro ao buscar templates:', error);
        setErrorMessage('Falha ao carregar templates de v√≠deo');
      }
    };
    
    fetchTemplates();
  }, [campaignType]);
  
  // Iniciar renderiza√ß√£o de v√≠deo
  const startRendering = async () => {
    if (!selectedTemplate) {
      setErrorMessage('Por favor, selecione um template primeiro');
      return;
    }
    
    try {
      setRenderStatus('queued');
      setRenderProgress(0);
      
      // Em uma implementa√ß√£o real, isso chamaria um endpoint de API
      const response = await fetch('/api/remotion/render', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          briefingId,
          opportunityId,
          templateId: selectedTemplate,
          campaignType
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        setRenderJob(data.jobId);
        setRenderStatus('rendering');
        
        // Iniciar consulta peri√≥dica de status
        pollRenderStatus(data.jobId);
      } else {
        throw new Error(data.message || 'Falha ao iniciar a renderiza√ß√£o');
      }
    } catch (error) {
      console.error('Erro ao iniciar renderiza√ß√£o:', error);
      setRenderStatus('error');
      setErrorMessage(error.message || 'Falha ao iniciar a renderiza√ß√£o');
    }
  };
  
  // Consultar status da renderiza√ß√£o
  const pollRenderStatus = async (jobId) => {
    try {
      const response = await fetch(`/api/remotion/status/${jobId}`);
      const data = await response.json();
      
      if (data.status === 'completed') {
        setRenderStatus('completed');
        setRenderProgress(100);
        setVideoUrl(data.videoUrl);
      } else if (data.status === 'error') {
        setRenderStatus('error');
        setErrorMessage(data.message || 'Erro durante a renderiza√ß√£o');
      } else {
        // Ainda em progresso
        setRenderProgress(data.progress || 0);
        
        // Continuar consultando
        setTimeout(() => pollRenderStatus(jobId), 3000);
      }
    } catch (error) {
      console.error('Erro ao consultar status:', error);
      setRenderStatus('error');
      setErrorMessage('Falha ao verificar status da renderiza√ß√£o');
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-lg p-6">
      <div className="flex items-center mb-6">
        <Film className="h-6 w-6 mr-2 text-indigo-600" />
        <h3 className="text-lg font-medium text-gray-900">Renderizador de V√≠deo Remotion</h3>
      </div>
      
      {/* Sele√ß√£o de Template */}
      <div className="mb-6">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Template de V√≠deo
        </label>
        <div className="grid grid-cols-2 gap-3">
          {templates.map(template => (
            <div 
              key={template.id}
              className={`border rounded-lg p-3 cursor-pointer transition ${
                selectedTemplate === template.id 
                  ? 'border-indigo-500 bg-indigo-50' 
                  : 'border-gray-200 hover:border-indigo-300'
              }`}
              onClick={() => setSelectedTemplate(template.id)}
            >
              <div className="flex justify-between items-center mb-2">
                <span className="font-medium text-gray-900">{template.name}</span>
                {selectedTemplate === template.id && (
                  <CheckCircle size={16} className="text-indigo-600" />
                )}
              </div>
              <div className="text-xs text-gray-500 mb-1">Formatos: {template.formats.join(', ')}</div>
              <div className="text-xs text-gray-500">Dura√ß√£o: {template.duration}s</div>
            </div>
          ))}
        </div>
      </div>
      
      {/* Status da Renderiza√ß√£o */}
      <div className="mb-6">
        <div className="flex items-center justify-between mb-2">
          <span className="text-sm font-medium text-gray-700">Status da Renderiza√ß√£o</span>
          <span className={`text-xs font-medium px-2 py-1 rounded-full ${
            renderStatus === 'completed' ? 'bg-green-100 text-green-800' :
            renderStatus === 'rendering' ? 'bg-blue-100 text-blue-800' :
            renderStatus === 'queued' ? 'bg-yellow-100 text-yellow-800' :
            renderStatus === 'error' ? 'bg-red-100 text-red-800' :
            'bg-gray-100 text-gray-800'
          }`}>
            {renderStatus === 'idle' && 'N√£o Iniciado'}
            {renderStatus === 'queued' && 'Na Fila'}
            {renderStatus === 'rendering' && 'Renderizando'}
            {renderStatus === 'completed' && 'Conclu√≠do'}
            {renderStatus === 'error' && 'Erro'}
          </span>
        </div>
        
        {/* Barra de Progresso */}
        {(renderStatus === 'rendering' || renderStatus === 'queued') && (
          <div className="w-full bg-gray-200 rounded-full h-2.5 mb-2">
            <div 
              className="bg-indigo-600 h-2.5 rounded-full transition-all duration-500" 
              style={{ width: `${renderProgress}%` }}
            ></div>
          </div>
        )}
        
        {/* Mensagem de Erro */}
        {errorMessage && (
          <div className="text-sm text-red-600 mt-2">
            {errorMessage}
          </div>
        )}
      </div>
      
      {/* A√ß√µes */}
      <div className="flex space-x-3">
        {renderStatus === 'idle' && (
          <button
            onClick={startRendering}
            className="flex items-center justify-center px-4 py-2 w-full bg-indigo-600 text-white text-sm font-medium rounded-md hover:bg-indigo-700"
          >
            <Film size={16} className="mr-2" />
            Iniciar Renderiza√ß√£o
          </button>
        )}
        
        {(renderStatus === 'rendering' || renderStatus === 'queued') && (
          <button
            disabled
            className="flex items-center justify-center px-4 py-2 w-full bg-indigo-300 text-white text-sm font-medium rounded-md"
          >
            <RefreshCw size={16} className="mr-2 animate-spin" />
            Renderiza√ß√£o em Andamento
          </button>
        )}
        
        {renderStatus === 'completed' && (
          <>
            <button
              onClick={() => window.open(videoUrl, '_blank')}
              className="flex items-center justify-center px-4 py-2 flex-1 bg-indigo-600 text-white text-sm font-medium rounded-md hover:bg-indigo-700"
            >
              <PlayCircle size={16} className="mr-2" />
              Pr√©-visualizar
            </button>
            <button
              onClick={() => {
                const link = document.createElement('a');
                link.href = videoUrl;
                link.download = `${campaignType.toLowerCase().replace(/\s+/g, '-')}-video.mp4`;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
              }}
              className="flex items-center justify-center px-4 py-2 flex-1 border border-indigo-600 text-indigo-600 text-sm font-medium rounded-md hover:bg-indigo-50"
            >
              <Download size={16} className="mr-2" />
              Baixar
            </button>
          </>
        )}
        
        {renderStatus === 'error' && (
          <button
            onClick={startRendering}
            className="flex items-center justify-center px-4 py-2 w-full bg-indigo-600 text-white text-sm font-medium rounded-md hover:bg-indigo-700"
          >
            <RefreshCw size={16} className="mr-2" />
            Tentar Novamente
          </button>
        )}
      </div>
      
      {/* Pr√©-visualiza√ß√£o do V√≠deo Conclu√≠do */}
      {renderStatus === 'completed' && videoUrl && (
        <div className="mt-6">
          <div className="aspect-video w-full bg-black rounded-lg overflow-hidden">
            <video 
              src={videoUrl} 
              controls 
              className="w-full h-full object-contain"
              poster="/api/placeholder/640/360"
            />
          </div>
          <div className="mt-2 text-xs text-gray-500 text-center">
            V√≠deo pronto para implementa√ß√£o da campanha
          </div>
        </div>
      )}
    </div>
  );
};

export default RemotionVideoRenderer;
2. Implementa√ß√£o Backend do Servi√ßo de Renderiza√ß√£o Remotion
Agora, vamos implementar o servi√ßo backend principal que manipula a renderiza√ß√£o de v√≠deo do Remotion:
typescript// src/drophunter/services/RemotionRenderer.ts

import { Queue } from '../utils/Queue';
import { CreativeBriefing } from '../models/CreativeBriefing';
import { PerformanceMaxTemplate, SearchAdsTemplate, YouTubeShortsTemplate, TikTokTemplate, ThreeDProductTemplate } from '../templates/remotion';
import { RemotionTemplate, RenderJob, RenderResult, RenderStatus } from '../types/remotion';
import { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';
import { Lambda } from '@aws-sdk/client-lambda';
import { v4 as uuidv4 } from 'uuid';
import { getSignedUrl } from '@aws-sdk/s3-request-presigner';
import { config } from '../config';
import { logger } from '../utils/logger';

export class RemotionRenderer {
  private templates: Map<string, RemotionTemplate>;
  private renderQueue: Queue<RenderJob>;
  private lambdaClient: Lambda;
  private s3Client: S3Client;
  private isProcessing: boolean = false;
  
  constructor() {
    this.templates = new Map();
    this.renderQueue = new Queue();
    this.lambdaClient = new Lambda({
      region: config.aws.region,
      credentials: {
        accessKeyId: config.aws.accessKeyId,
        secretAccessKey: config.aws.secretAccessKey
      }
    });
    
    this.s3Client = new S3Client({
      region: config.aws.region,
      credentials: {
        accessKeyId: config.aws.accessKeyId,
        secretAccessKey: config.aws.secretAccessKey
      }
    });
    
    // Inicializar templates dispon√≠veis
    this.initializeTemplates();
  }
  
  private initializeTemplates() {
    logger.info('Inicializando templates do Remotion');
    
    // Registrar templates dispon√≠veis
    this.templates.set('performance-max', new PerformanceMaxTemplate());
    this.templates.set('search-ads', new SearchAdsTemplate());
    this.templates.set('youtube-shorts', new YouTubeShortsTemplate());
    this.templates.set('tiktok', new TikTokTemplate());
    this.templates.set('3d-product', new ThreeDProductTemplate());
    
    logger.info(`Registrados ${this.templates.size} templates`);
  }
  
  /**
   * Obter todos os templates dispon√≠veis
   */
  public getAvailableTemplates() {
    return Array.from(this.templates.entries()).map(([id, template]) => ({
      id,
      name: template.name,
      description: template.description,
      formats: template.supportedFormats,
      duration: template.defaultDuration
    }));
  }
  
  /**
   * Renderiza um v√≠deo com base no briefing criativo e no template selecionado
   */
  async renderVideo(briefing: CreativeBriefing, templateId: string): Promise<RenderResult> {
    logger.info(`Iniciando renderiza√ß√£o de v√≠deo para briefing ${briefing.id} com template ${templateId}`);
    
    const template = this.templates.get(templateId);
    
    if (!template) {
      logger.error(`Template n√£o encontrado: ${templateId}`);
      throw new Error(`Template n√£o encontrado: ${templateId}`);
    }
    
    // Preparar par√¢metros para o template
    const params = this.prepareTemplateParams(briefing, template);
    
    // Criar um ID de job √∫nico
    const jobId = uuidv4();
    
    // Adicionar √† fila de renderiza√ß√£o
    await this.renderQueue.enqueue({
      id: jobId,
      templateId,
      params,
      briefingId: briefing.id,
      status: 'pending',
      progress: 0,
      createdAt: new Date(),
      updatedAt: new Date()
    });
    
    logger.info(`Adicionado job de renderiza√ß√£o ${jobId} √† fila`);
    
    // Iniciar processamento da fila se ainda n√£o estiver processando
    if (!this.isProcessing) {
      this.processRenderQueue();
    }
    
    return {
      jobId,
      status: 'queued',
      estimatedCompletionTime: this.estimateCompletionTime(),
      progress: 0
    };
  }
  
  /**
   * Preparar par√¢metros para o template Remotion com base no briefing
   */
  private prepareTemplateParams(briefing: CreativeBriefing, template: RemotionTemplate) {
    // Extrair dados relevantes do briefing
    const { 
      productName, 
      targetAudience, 
      creativeConcept, 
      keyMessages, 
      visualGuidelines, 
      copyGuidelines,
      emotionalTriggers,
      assetRecommendations 
    } = briefing;
    
    // Obter headlines e descri√ß√µes dos assets, se dispon√≠veis
    const headlines = assetRecommendations?.textAssets?.headlines?.examples || [];
    const descriptions = assetRecommendations?.textAssets?.descriptions?.examples || [];
    
    // Obter URLs de imagens recomendadas
    const imageUrls = assetRecommendations?.imageAssets?.examples?.map(img => img.url) || [];
    
    // Deixe o template transformar o briefing em par√¢metros espec√≠ficos
    return template.prepareParams({
      productName,
      targetAudience,
      creativeConcept,
      keyMessages,
      visualGuidelines,
      copyGuidelines,
      emotionalTriggers,
      headlines,
      descriptions,
      imageUrls
    });
  }
  
  /**
   * Processar a fila de renderiza√ß√£o
   */
  private async processRenderQueue() {
    if (this.isProcessing) {
      return;
    }
    
    this.isProcessing = true;
    logger.info('Iniciando processamento da fila de renderiza√ß√£o');
    
    try {
      while (!this.renderQueue.isEmpty()) {
        const job = await this.renderQueue.peek();
        
        if (!job) {
          break;
        }
        
        logger.info(`Processando job de renderiza√ß√£o: ${job.id}`);
        
        // Atualizar status do job
        job.status = 'rendering';
        job.progress = 10;
        job.updatedAt = new Date();
        
        try {
          // Renderizar v√≠deo usando AWS Lambda
          const outputUrl = await this.renderWithLambda(job);
          
          // Atualizar job com sucesso
          job.status = 'completed';
          job.progress = 100;
          job.outputUrl = outputUrl;
          job.updatedAt = new Date();
          job.completedAt = new Date();
          
          logger.info(`Job de renderiza√ß√£o ${job.id} conclu√≠do com sucesso`);
        } catch (error) {
          // Atualizar job com erro
          job.status = 'error';
          job.error = error.message;
          job.updatedAt = new Date();
          
          logger.error(`Erro no job de renderiza√ß√£o ${job.id}: ${error.message}`);
        }
        
        // Remover job da fila
        await this.renderQueue.dequeue();
      }
    } catch (error) {
      logger.error(`Erro ao processar fila de renderiza√ß√£o: ${error.message}`);
    } finally {
      this.isProcessing = false;
      logger.info('Processamento da fila de renderiza√ß√£o conclu√≠do');
    }
  }
  
  /**
   * Renderiza v√≠deo via AWS Lambda
   */
  private async renderWithLambda(job: RenderJob): Promise<string> {
    logger.info(`Iniciando renderiza√ß√£o com AWS Lambda para job ${job.id}`);
    
    try {
      // Obter o template
      const template = this.templates.get(job.templateId);
      
      if (!template) {
        throw new Error(`Template n√£o encontrado: ${job.templateId}`);
      }
      
      // Preparar par√¢metros para o Lambda
      const lambdaParams = {
        FunctionName: config.aws.lambdaFunctions.remotionRenderer,
        InvocationType: 'RequestResponse',
        Payload: JSON.stringify({
          templateId: job.templateId,
          params: job.params,
          jobId: job.id,
          outputBucket: config.aws.s3.outputBucket,
          outputKey: `renders/${job.id}/output.mp4`
        })
      };
      
      // Atualizar progresso
      job.progress = 20;
      job.updatedAt = new Date();
      
      // Chamar o Lambda
      const lambdaResponse = await this.lambdaClient.invoke(lambdaParams);
      
      // Atualizar progresso
      job.progress = 80;
      job.updatedAt = new Date();
      
      // Verificar resposta
      if (lambdaResponse.FunctionError) {
        throw new Error(`Erro na fun√ß√£o Lambda: ${lambdaResponse.FunctionError}`);
      }
      
      const payload = JSON.parse(Buffer.from(lambdaResponse.Payload as Uint8Array).toString());
      
      if (!payload.success) {
        throw new Error(payload.error || 'Falha na renderiza√ß√£o do v√≠deo');
      }
      
      // Gerar URL assinada para o arquivo de sa√≠da
      const getObjectParams = {
        Bucket: config.aws.s3.outputBucket,
        Key: `renders/${job.id}/output.mp4`
      };
      
      const command = new PutObjectCommand(getObjectParams);
      const signedUrl = await getSignedUrl(this.s3Client, command, { expiresIn: 3600 * 24 * 7 }); // 7 dias
      
      return signedUrl;
    } catch (error) {
      logger.error(`Erro ao renderizar com Lambda: ${error.message}`);
      throw error;
    }
  }
  
  /**
   * Estima o tempo de conclus√£o para um novo job
   */
  private estimateCompletionTime(): Date {
    // Estimativa b√°sica - 5 minutos por job na fila + 10 minutos para o novo job
    const queueLength = this.renderQueue.size();
    const estimatedMinutes = queueLength * 5 + 10;
    
    const estimatedTime = new Date();
    estimatedTime.setMinutes(estimatedTime.getMinutes() + estimatedMinutes);
    
    return estimatedTime;
  }
  
  /**
   * Verifica o status de um job de renderiza√ß√£o
   */
  async checkRenderStatus(jobId: string): Promise<RenderStatus> {
    logger.info(`Verificando status do job de renderiza√ß√£o: ${jobId}`);
    
    const job = await this.findJobById(jobId);
    
    if (!job) {
      logger.warn(`Job de renderiza√ß√£o n√£o encontrado: ${jobId}`);
      return {
        status: 'not_found',
        message: 'Job de renderiza√ß√£o n√£o encontrado',
        progress: 0
      };
    }
    
    return {
      status: job.status,
      progress: job.progress,
      message: job.error,
      outputUrl: job.outputUrl,
      completedAt: job.completedAt
    };
  }
  
  /**
   * Encontra um job pelo ID
   */
  private async findJobById(jobId: string): Promise<RenderJob | null> {
    // Em uma implementa√ß√£o real, isso buscaria no banco de dados
    // Aqui, fazemos uma busca simples na fila em mem√≥ria
    const allJobs = await this.renderQueue.getAllItems();
    return allJobs.find(job => job.id === jobId) || null;
  }
  
  /**
   * Cancela um job de renderiza√ß√£o
   */
  async cancelRenderJob(jobId: string): Promise<boolean> {
    logger.info(`Cancelando job de renderiza√ß√£o: ${jobId}`);
    
    // Em uma implementa√ß√£o real, isso interromperia o processo
    // e removeria da fila se necess√°rio
    
    const job = await this.findJobById(jobId);
    
    if (!job) {
      return false;
    }
    
    job.status = 'cancelled';
    job.updatedAt = new Date();
    
    return true;
  }
}
3. Tipos de Dados para o Sistema Remotion
Agora, vamos definir as interfaces e tipos necess√°rios para o sistema Remotion:
typescript// src/drophunter/types/remotion.ts

/**
 * Interface para templates Remotion
 */
export interface RemotionTemplate {
  name: string;
  description: string;
  supportedFormats: string[];
  defaultDuration: number;
  prepareParams: (briefingData: any) => any;
}

/**
 * Interface para jobs de renderiza√ß√£o
 */
export interface RenderJob {
  id: string;
  templateId: string;
  params: any;
  briefingId: string;
  status: 'pending' | 'queued' | 'rendering' | 'completed' | 'error' | 'cancelled';
  progress: number;
  createdAt: Date;
  updatedAt: Date;
  completedAt?: Date;
  outputUrl?: string;
  error?: string;
}

/**
 * Interface para resultado de renderiza√ß√£o
 */
export interface RenderResult {
  jobId: string;
  status: 'queued' | 'rendering' | 'completed' | 'error';
  estimatedCompletionTime: Date;
  progress: number;
  outputUrl?: string;
}

/**
 * Interface para status de renderiza√ß√£o
 */
export interface RenderStatus {
  status: 'pending' | 'queued' | 'rendering' | 'completed' | 'error' | 'cancelled' | 'not_found';
  progress: number;
  message?: string;
  outputUrl?: string;
  completedAt?: Date;
}
4. Implementa√ß√£o do Template Performance Max
Vamos implementar um dos templates Remotion para exemplo:
typescript// src/drophunter/templates/remotion/PerformanceMaxTemplate.ts

import { RemotionTemplate } from '../../types/remotion';

export class PerformanceMaxTemplate implements RemotionTemplate {
  name = 'Performance Max Video';
  description = 'Template otimizado para campanhas Performance Max, com m√∫ltiplos formatos e dura√ß√£o de 30 segundos';
  supportedFormats = ['16:9', '1:1', '9:16'];
  defaultDuration = 30;
  
  /**
   * Prepara par√¢metros espec√≠ficos para este template
   */
  prepareParams(briefingData: any) {
    const {
      productName,
      headlines = [],
      descriptions = [],
      imageUrls = [],
      visualGuidelines = {},
      copyGuidelines = {},
      emotionalTriggers = []
    } = briefingData;
    
    // Extrair cores da paleta visual, ou usar padr√µes
    const colorPalette = visualGuidelines.colorPalette || {
      primary: '#3B82F6',
      secondary: '#10B981',
      background: '#FFFFFF',
      text: '#1F2937',
      accent: '#F59E0B'
    };
    
    // Selecionar os melhores headlines e descri√ß√µes
    const topHeadlines = headlines.slice(0, 3);
    const topDescriptions = descriptions.slice(0, 2);
    
    // Configurar sequ√™ncias de cenas
    const scenes = [
      {
        type: 'intro',
        duration: 5,
        headline: topHeadlines[0] || productName,
        background: colorPalette.background,
        imageUrl: imageUrls[0] || null
      },
      {
        type: 'feature',
        duration: 8,
        headline: topHeadlines[1] || 'Recursos Principais',
        description: topDescriptions[0] || '',
        background: colorPalette.background,
        imageUrl: imageUrls[1] || null
      },
      {
        type: 'benefit',
        duration: 8,
        headline: topHeadlines[2] || 'Benef√≠cios',
        description: topDescriptions[1] || '',
        background: colorPalette.background,
        imageUrl: imageUrls[2] || null
      },
      {
        type: 'cta',
        duration: 5,
        headline: 'Compre Agora',
        background: colorPalette.primary,
        textColor: '#FFFFFF'
      }
    ];
    
    return {
      productName,
      colorPalette,
      fonts: {
        heading: 'Inter',
        body: 'Inter'
      },
      scenes,
      transition: 'fade',
      transitionDuration: 0.5,
      formats: this.supportedFormats,
      emotionalTriggers
    };
  }
}
5. Endpoint de API para Gerenciamento de Renderiza√ß√£o
Agora, vamos criar os endpoints da API necess√°rios para gerenciar o processo de renderiza√ß√£o:
typescript// src/drophunter/controllers/RemotionController.ts

import { Request, Response } from 'express';
import { RemotionRenderer } from '../services/RemotionRenderer';
import { CreativeBriefingService } from '../services/CreativeBriefingService';
import { logger } from '../utils/logger';

export class RemotionController {
  private remotionRenderer: RemotionRenderer;
  private briefingService: CreativeBriefingService;
  
  constructor() {
    this.remotionRenderer = new RemotionRenderer();
    this.briefingService = new CreativeBriefingService();
  }
  
  /**
   * Obter todos os templates dispon√≠veis
   */
  async getTemplates(req: Request, res: Response) {
    try {
      const templates = this.remotionRenderer.getAvailableTemplates();
      res.json({ success: true, templates });
    } catch (error) {
      logger.error(`Erro ao obter templates: ${error.message}`);
      res.status(500).json({ success: false, message: 'Erro ao obter templates de v√≠deo' });
    }
  }
  
  /**
   * Iniciar renderiza√ß√£o de v√≠deo
   */
  async startRendering(req: Request, res: Response) {
    try {
      const { briefingId, templateId, opportunityId } = req.body;
      
      // Validar par√¢metros
      if (!briefingId || !templateId) {
        return res.status(400).json({ 
          success: false, 
          message: 'Par√¢metros obrigat√≥rios: briefingId, templateId' 
        });
      }
      
      // Buscar briefing
      const briefing = await this.briefingService.getBriefingById(briefingId);
      
      if (!briefing) {
        return res.status(404).json({ 
          success: false, 
          message: 'Briefing n√£o encontrado' 
        });
      }
      
      // Iniciar renderiza√ß√£o
      const result = await this.remotionRenderer.renderVideo(briefing, templateId);
      
      res.json({ 
        success: true, 
        jobId: result.jobId,
        status: result.status,
        estimatedCompletionTime: result.estimatedCompletionTime
      });
    } catch (error) {
      logger.error(`Erro ao iniciar renderiza√ß√£o: ${error.message}`);
      res.status(500).json({ 
        success: false, 
        message: 'Erro ao iniciar renderiza√ß√£o de v√≠deo',
        error: error.message
      });
    }
  }
  
  /**
   * Verificar status de renderiza√ß√£o
   */
  async checkStatus(req: Request, res: Response) {
    try {
      const { jobId } = req.params;
      
      // Validar par√¢metros
      if (!jobId) {
        return res.status(400).json({ 
          success: false, 
          message: 'Par√¢metro obrigat√≥rio: jobId' 
        });
      }
      
      // Verificar status
      const status = await this.remotionRenderer.checkRenderStatus(jobId);
      
      res.json({ 
        success: true, 
        ...status
      });
    } catch (error) {
      logger.error(`Erro ao verificar status: ${error.message}`);
      res.status(500).json({ 
        success: false, 
        message: 'Erro ao verificar status da renderiza√ß√£o',
        error: error.message
      });
    }
  }
  
  /**
   * Cancelar renderiza√ß√£o
   */
  async cancelRendering(req: Request, res: Response) {
    try {
      const { jobId } = req.params;
      
      // Validar par√¢metros
      if (!jobId) {
        return res.status(400).json({ 
          success: false, 
          message: 'Par√¢metro obrigat√≥rio: jobId' 
        });
      }
      
      // Cancelar renderiza√ß√£o
      const cancelled = await this.remotionRenderer.cancelRenderJob(jobId);
      
      if (cancelled) {
        res.json({ 
          success: true, 
          message: 'Renderiza√ß√£o cancelada com sucesso' 
        });
      } else {
        res.status(404).json({ 
          success: false, 
          message: 'Job de renderiza√ß√£o n√£o encontrado ou n√£o pode ser cancelado' 
        });
      }
    } catch (error) {
      logger.error(`Erro ao cancelar renderiza√ß√£o: ${error.message}`);
      res.status(500).json({ 
        success: false, 
        message: 'Erro ao cancelar renderiza√ß√£o de v√≠deo',
        error: error.message
      });
    }
  }
}
6. Integra√ß√£o no Fluxo de Trabalho do DropHunter
Finalmente, vamos mostrar como integrar o componente de renderiza√ß√£o de v√≠deo no fluxo de trabalho existente do DropHunter:
typescript// src/drophunter/services/IntegratedWorkflowSystem.ts

import { ProductMonitoringSystem } from './ProductMonitoringSystem';
import { MultiShopifySystem } from './MultiShopifySystem';
import { CreativeStudioSystem } from './CreativeStudioSystem';
import { RemotionRenderer } from './RemotionRenderer';
import { ExecutiveReportingSystem } from './ExecutiveReportingSystem';
import { logger } from '../utils/logger';

export class IntegratedWorkflowSystem {
  private monitoringSystem: ProductMonitoringSystem;
  private multiShopifySystem: MultiShopifySystem;
  private creativeStudioSystem: CreativeStudioSystem;
  private remotionRenderer: RemotionRenderer; // Adicionado o sistema de renderiza√ß√£o Remotion
  private reportingSystem: ExecutiveReportingSystem;
  
  constructor() {
    this.monitoringSystem = new ProductMonitoringSystem();
    this.multiShopifySystem = new MultiShopifySystem();
    this.creativeStudioSystem = new CreativeStudioSystem();
    this.remotionRenderer = new RemotionRenderer(); // Inicializa√ß√£o
    this.reportingSystem = new ExecutiveReportingSystem();
  }
  
  async initialize() {
    logger.info("Inicializando Sistema Integrado de Fluxo de Trabalho...");
    
    // Inicializar todos os sistemas componentes
    await this.monitoringSystem.initialize();
    await this.multiShopifySystem.initialize();
    await this.creativeStudioSystem.initialize();
    await this.remotionRenderer.initialize(); // Adicionado √† inicializa√ß√£o
    await this.reportingSystem.initialize();
    
    logger.info("Sistema Integrado de Fluxo de Trabalho inicializado com sucesso");
    return true;
  }
  
  /**
   * Executa o fluxo completo para uma oportunidade
   */
  async executeFullWorkflow(opportunityId) {
    logger.info(`Executando fluxo completo para oportunidade: ${opportunityId}`);
    
    try {
      // Etapa 1: Verificar oportunidade
      const opportunity = await this.opportunityRepository.getById(opportunityId);
      if (!opportunity) {
        throw new Error(`Oportunidade n√£o encontrada: ${opportunityId}`);
      }
      
      logger.info(`Iniciando fluxo para ${opportunity.productName} - ${opportunity.country}`);
      
      // Etapa 2: Gerar briefing criativo
      logger.info("Etapa 2: Gerando briefing criativo...");
      const briefing = await this.creativeStudioSystem.generateCreativeBriefing(opportunityId);
      
      // Etapa 3: Gerar assets criativos
      logger.info("Etapa 3: Gerando assets criativos...");
      const assets = await this.creativeStudioSystem.generateCreativeAssets(briefing.id);
      
      // Etapa 4: Renderizar v√≠deos usando Remotion (NOVA ETAPA)
      logger.info("Etapa 4: Renderizando v√≠deos com Remotion...");
      const renderResult = await this.renderVideos(briefing, opportunity);
      
      // Etapa 5: Replicar para lojas Shopify
      logger.info("Etapa 5: Replicando para lojas Shopify...");
      const replicationResult = await this.multiShopifySystem.replicateProduct(opportunityId);
      
      // Etapa 6: Gerar relat√≥rio executivo
      logger.info("Etapa 6: Gerando relat√≥rio executivo...");
      const report = await this.reportingSystem.generateOpportunityReport(opportunityId);
      
      // Compilar resultados do fluxo
      const workflowResults = {
        opportunityId,
        productName: opportunity.productName,
        country: opportunity.country,
        steps: {
          briefing: {
            id: briefing.id,
            status: 'completed',
            timestamp: briefing.createdAt
          },
          assets: {
            id: assets.id,
            status: 'completed',
            timestamp: assets.createdAt
          },
          videoRendering: { // Nova etapa no fluxo
            status: renderResult.success ? 'completed' : 'partial',
            videoCount: renderResult.videoCount,
            videoUrls: renderResult.videoUrls,
            timestamp: new Date()
          },
          replication: {
            status: replicationResult.successCount > 0 ? 'completed' : 'partial',
            successCount: replicationResult.successCount,
            failureCount: replicationResult.failureCount,
            timestamp: new Date()
          },
          report: {
            id: report.id,
            status: 'completed',
            timestamp: report.generatedAt
          }
        },
        completedAt: new Date(),
        status: 'completed'
      };
      
      // Atualizar oportunidade com resultados do fluxo
      opportunity.workflowResults = workflowResults;
      opportunity.status = 'processed';
      await this.opportunityRepository.update(opportunity);
      
      logger.info(`Fluxo completo executado com sucesso para ${opportunity.productName}`);
      return workflowResults;
    } catch (error) {
      logger.error(`Erro na execu√ß√£o do fluxo para ${opportunityId}:`, error);
      
      // Registrar falha no fluxo
      const failedWorkflow = {
        opportunityId,
        status: 'failed',
        error: error.message,
        timestamp: new Date()
      };
      
      // Atualizar oportunidade com falha
      const opportunity = await this.opportunityRepository.getById(opportunityId);
      if (opportunity) {
        opportunity.workflowResults = failedWorkflow;
        opportunity.status = 'error';
        await this.opportunityRepository.update(opportunity);
      }
      
      throw error;
    }
  }
  
  /**
   * Renderiza v√≠deos para uma oportunidade usando Remotion
   */
  private async renderVideos(briefing, opportunity) {
    try {
      logger.info(`Iniciando renderiza√ß√£o de v√≠deos para briefing ${briefing.id}`);
      
      // Determinar templates com base no tipo de campanha
      const campaignType = opportunity.campaignType || 'Performance Max';
      
      let templateIds = [];
      
      switch (campaignType) {
        case 'Performance Max':
          templateIds = ['performance-max'];
          break;
        case 'YouTube':
          templateIds = ['youtube-shorts'];
          break;
        case 'TikTok':
          templateIds = ['tiktok'];
          break;
        case 'Search':
          templateIds = ['search-ads'];
          break;
        default:
          templateIds = ['performance-max'];
      }
      
      // Se o produto tem atributos 3D, adicionar o template 3D
      if (opportunity.sourceData?.product?.has3dAttributes) {
        templateIds.push('3d-product');
      }
      
      // Iniciar renderiza√ß√µes para todos os templates
      const renderJobs = [];
      
      for (const templateId of templateIds) {
        const renderResult = await this.remotionRenderer.renderVideo(briefing, templateId);
        renderJobs.push({
          jobId: renderResult.jobId,
          templateId,
          status: renderResult.status
        });
      }
      
      // Aguardar 10 segundos para iniciar a verifica√ß√£o (para evitar verifica√ß√£o muito cedo)
      await new Promise(resolve => setTimeout(resolve, 10000));
      
      // Verificar status em intervalos
      let allCompleted = false;
      let attempts = 0;
      const maxAttempts = 60; // 30 minutos (60 x 30 segundos)
      
      const completedJobs = [];
      
      while (!allCompleted && attempts < maxAttempts) {
        attempts++;
        
        // Verificar status de cada job
        let stillProcessing = false;
        
        for (const job of renderJobs) {
          if (job.status === 'completed') {
            continue;
          }
          
          const status = await this.remotionRenderer.checkRenderStatus(job.jobId);
          
          if (status.status === 'completed') {
            job.status = 'completed';
            job.outputUrl = status.outputUrl;
            completedJobs.push(job);
          } else if (status.status === 'error') {
            job.status = 'error';
            job.error = status.message;
          } else {
            // Ainda em processamento
            stillProcessing = true;
          }
        }
        
        allCompleted = !stillProcessing;
        
        if (!allCompleted) {
          // Aguardar 30 segundos antes de verificar novamente
          await new Promise(resolve => setTimeout(resolve, 30000));
        }
      }
      
      // Coleta URLs de v√≠deos conclu√≠dos
      const videoUrls = completedJobs.map(job => ({
        templateId: job.templateId,
        url: job.outputUrl
      }));
      
      return {
        success: completedJobs.length > 0,
        videoCount: completedJobs.length,
        totalJobs: renderJobs.length,
        videoUrls
      };
    } catch (error) {
      logger.error(`Erro na renderiza√ß√£o de v√≠deos: ${error.message}`);
      
      return {
        success: false,
        error: error.message,
        videoCount: 0,
        totalJobs: 0,
        videoUrls: []
      };
    }
  }
}
7. Atualizando o Fluxo de Trabalho no Frontend
Finalmente, vamos atualizar o componente de fluxo de trabalho no frontend para incluir a nova etapa de renderiza√ß√£o de v√≠deo:
jsximport React, { useState, useEffect } from 'react';
import {
  CheckCircle,
  Clock,
  AlertCircle,
  FileText,
  ShoppingCart,
  Film,
  Sparkles,
  BrainCircuit
} from 'lucide-react';
import RemotionVideoRenderer from './RemotionVideoRenderer'; // Importando o componente

const WorkflowModal = ({ showWorkflowModal, setShowWorkflowModal, selectedOpportunity }) => {
  // Estado para controlar se deve mostrar o componente de renderiza√ß√£o
  const [showVideoRenderer, setShowVideoRenderer] = useState(false);
  
  // Determinar qual etapa est√° ativa ou j√° foi conclu√≠da
  const workflow = selectedOpportunity?.workflow || {
    status: 'pending',
    steps: []
  };
  
  // Converter o status em um valor num√©rico para compara√ß√£o
  const getStepNumber = (stepName) => {
    const stepMap = {
      "An√°lise de Oportunidade": 1,
      "Briefing Criativo": 2,
      "Gera√ß√£o de Assets": 3,
      "Renderiza√ß√£o de V√≠deo": 4, // Nova etapa
      "Replica√ß√£o Shopify": 5,
      "Relat√≥rio Executivo": 6
    };
    
    return stepMap[stepName] || 0;
  };
  
  // Verificar se uma etapa est√° completa, em andamento ou pendente
  const getStepStatus = (stepName) => {
    const step = workflow.steps.find(s => s.name === stepName);
    
    if (!step) {
      return 'pending';
    }
    
    return step.status;
  };
  
  // Iniciar a pr√≥xima etapa
  const startNextStep = async () => {
    // L√≥gica para iniciar a pr√≥xima etapa...
    
    // Se a etapa atual for "Gera√ß√£o de Assets" e a pr√≥xima for "Renderiza√ß√£o de V√≠deo"
    if (getCurrentStep() === 3) {
      setShowVideoRenderer(true);
    }
  };
  
  // Obter o n√∫mero da etapa atual
  const getCurrentStep = () => {
    const completedSteps = workflow.steps
      .filter(s => s.status === 'completed')
      .map(s => getStepNumber(s.name));
    
    const inProgressSteps = workflow.steps
      .filter(s => s.status === 'in_progress')
      .map(s => getStepNumber(s.name));
    
    if (inProgressSteps.length > 0) {
      return Math.max(...inProgressSteps);
    }
    
    if (completedSteps.length > 0) {
      return Math.max(...completedSteps) + 1;
    }
    
    return 1;
  };

  return (
    <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
        <div className="flex justify-between items-center border-b border-gray-200 px-6 py-4">
          <div className="flex items-center">
            <h3 className="text-lg font-medium text-gray-900">
              Fluxo de Trabalho Integrado
            </h3>
          </div>
          <div className="flex items-center">
            <button 
              className="text-gray-400 hover:text-gray-500"
              onClick={() => setShowWorkflowModal(false)}
            >
              <span className="sr-only">Fechar</span>
              <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>
        
        <div className="p-6 overflow-y-auto max-h-[calc(90vh-112px)]">
          {showVideoRenderer ? (
            // Mostrar componente de renderiza√ß√£o de v√≠deo quando ativo
            <RemotionVideoRenderer 
              opportunityId={selectedOpportunity.id}
              briefingId={workflow.steps.find(s => s.name === "Briefing Criativo")?.id}
              campaignType={selectedOpportunity.campaignType || "Performance Max"}
            />
          ) : (
            <>
              <div className="bg-indigo-50 p-4 rounded-lg mb-6">
                <h4 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
                  <Layers size={16} className="mr-2 text-indigo-600" />
                  Sistema Integrado de Fluxo de Trabalho
                </h4>
                <p className="text-sm text-gray-600">
                  O fluxo de trabalho integrado do DropHunter executa automaticamente 6 etapas sequenciais para cada oportunidade identificada, incluindo a nova etapa de renderiza√ß√£o de v√≠deo via Remotion.
                </p>
              </div>
              
              <div className="relative">
                {/* Linha de Timeline Vertical */}
                <div className="absolute left-[15px] top-1 bottom-1 w-1 bg-gray-200 z-0"></div>
                
                {/* Etapas do Fluxo de Trabalho */}
                <ul className="space-y-6 relative z-10">
                  <li className="flex">
                    <div className={`flex-shrink-0 h-8 w-8 rounded-full flex items-center justify-center ${
                      getStepStatus("An√°lise de Oportunidade") === 'completed' ? 'bg-green-500' :
                      getStepStatus("An√°lise de Oportunidade") === 'in_progress' ? 'bg-blue-500' :
                      'bg-gray-300'
                    }`}>
                      <BrainCircuit size={16} className="text-white" />
                    </div>
                    <div className="ml-4 flex-1">
                      <h5 className="text-sm font-medium text-gray-900">An√°lise de Oportunidade</h5>
                      <p className="text-xs text-gray-500 mt-1">
                        A Claude 3.7 Sonnet analisa o produto usando as metodologias dos especialistas para avaliar seu potencial de mercado e viabilidade.
                      </p>
                      <div className={`mt-2 p-2 rounded ${
                        getStepStatus("An√°lise de Oportunidade") === 'completed' ? 'bg-green-50' :
                        getStepStatus("An√°lise de Oportunidade") === 'in_progress' ? 'bg-blue-50' :
                        'bg-gray-50'
                      }`}>
                        <span className={`text-xs font-medium ${
                          getStepStatus("An√°lise de Oportunidade") === 'completed' ? 'text-green-700' :
                          getStepStatus("An√°lise de Oportunidade") === 'in_progress' ? 'text-blue-700' :
                          'text-gray-500'
                        }`}>
                          {getStepStatus("An√°lise de Oportunidade") === 'completed' && 'Etapa conclu√≠da'}
                          {getStepStatus("An√°lise de Oportunidade") === 'in_progress' && 'Em andamento'}
                          {getStepStatus("An√°lise de Oportunidade") === 'pending' && 'Pendente'}
                        </span>
                      </div>
                    </div>
                  </li>
                  
                  <li className="flex">
                    <div className={`flex-shrink-0 h-8 w-8 rounded-full flex items-center justify-center ${
                      getStepStatus("Briefing Criativo") === 'completed' ? 'bg-green-500' :
                      getStepStatus("Briefing Criativo") === 'in_progress' ? 'bg-blue-500' :
                      'bg-gray-300'
                    }`}>
                      <Sparkles size={16} className="text-white" />
                    </div>
                    <div className="ml-4 flex-1">
                      <h5 className="text-sm font-medium text-gray-900">Briefing Criativo</h5>
                      <p className="text-xs text-gray-500 mt-1">
                        O sistema gera um briefing criativo completo baseado nas metodologias de Talia Wolf (Emotion-Based CRO), Amy Hebdon (Visual First) e outros especialistas.
                      </p>
                      <div className={`mt-2 p-2 rounded ${
                        getStepStatus("Briefing Criativo") === 'completed' ? 'bg-green-50' :
                        getStepStatus("Briefing Criativo") === 'in_progress' ? 'bg-blue-50' :
                        'bg-gray-50'
                      }`}>
                        <span className={`text-xs font-medium ${
                          getStepStatus("Briefing Criativo") === 'completed' ? 'text-green-700' :
                          getStepStatus("Briefing Criativo") === 'in_progress' ? 'text-blue-700' :
                          'text-gray-500'
                        }`}>
                          {getStepStatus("Briefing Criativo") === 'completed' && 'Etapa conclu√≠da'}
                          {getStepStatus("Briefing Criativo") === 'in_progress' && 'Em andamento'}
                          {getStepStatus("Briefing Criativo") === 'pending' && 'Pendente'}
                        </span>
                      </div>
                    </div>
                  </li>
                  
                  <li className="flex">
                    <div className={`flex-shrink-0 h-8 w-8 rounded-full flex items-center justify-center ${
                      getStepStatus("Gera√ß√£o de Assets") === 'completed' ? 'bg-green-500' :
                      getStepStatus("Gera√ß√£o de Assets") === 'in_progress' ? 'bg-blue-500' :
                      'bg-gray-300'
                    }`}>
                      <FileText size={16} className="text-white" />
                    </div>
                    <div className="ml-4 flex-1">
                      <h5 className="text-sm font-medium text-gray-900">Gera√ß√£o de Assets</h5>
                      <p className="text-xs text-gray-500 mt-1">
                        O Est√∫dio de Criativos gera headlines, descri√ß√µes e especifica√ß√µes para imagens/v√≠deos seguindo as metodologias de copywriting especializado.
                      </p>
                      <div className={`mt-2 p-2 rounded ${
                        getStepStatus("Gera√ß√£o de Assets") === 'completed' ? 'bg-green-50' :
                        getStepStatus("Gera√ß√£o de Assets") === 'in_progress' ? 'bg-blue-50' :
                        'bg-gray-50'
                      }`}>
                        <span className={`text-xs font-medium ${
                          getStepStatus("Gera√ß√£o de Assets") === 'completed' ? 'text-green-700' :
                          getStepStatus("Gera√ß√£o de Assets") === 'in_progress' ? 'text-blue-700' :
                          'text-gray-500'
                        }`}>
                          {getStepStatus("Gera√ß√£o de Assets") === 'completed' && 'Etapa conclu√≠da'}
                          {getStepStatus("Gera√ß√£o de Assets") === 'in_progress' && 'Em andamento'}
                          {getStepStatus("Gera√ß√£o de Assets") === 'pending' && 'Pendente'}
                        </span>
                      </div>
                    </div>
                  </li>
                  
                  {/* Nova etapa: Renderiza√ß√£o de V√≠deo */}
                  <li className="flex">
                    <div className={`flex-shrink-0 h-8 w-8 rounded-full flex items-center justify-center ${
                      getStepStatus("Renderiza√ß√£o de V√≠deo") === 'completed' ? 'bg-green-500' :
                      getStepStatus("Renderiza√ß√£o de V√≠deo") === 'in_progress' ? 'bg-blue-500' :
                      'bg-gray-300'
                    }`}>
                      <Film size={16} className="text-white" />
                    </div>
                    <div className="ml-4 flex-1">
                      <h5 className="text-sm font-medium text-gray-900">Renderiza√ß√£o de V√≠deo</h5>
                      <p className="text-xs text-gray-500 mt-1">
                        O sistema Remotion transforma os conceitos criativos em v√≠deos finalizados para diferentes formatos de campanha, prontos para implementa√ß√£o.
                      </p>
                      <div className={`mt-2 p-2 rounded ${
                        getStepStatus("Renderiza√ß√£o de V√≠deo") === 'completed' ? 'bg-green-50' :
                        getStepStatus("Renderiza√ß√£o de V√≠deo") === 'in_progress' ? 'bg-blue-50' :
                        'bg-gray-50'
                      }`}>
                        <span className={`text-xs font-medium ${
                          getStepStatus("Renderiza√ß√£o de V√≠deo") === 'completed' ? 'text-green-700' :
                          getStepStatus("Renderiza√ß√£o de V√≠deo") === 'in_progress' ? 'text-blue-700' :
                          'text-gray-500'
                        }`}>
                          {getStepStatus("Renderiza√ß√£o de V√≠deo") === 'completed' && 'Etapa conclu√≠da'}
                          {getStepStatus("Renderiza√ß√£o de V√≠deo") === 'in_progress' && 'Em andamento'}
                          {getStepStatus("Renderiza√ß√£o de V√≠deo") === 'pending' && 'Pendente'}
                        </span>
                      </div>
                    </div>
                  </li>
                  
                  <li className="flex">
                    <div className={`flex-shrink-0 h-8 w-8 rounded-full flex items-center justify-center ${
                      getStepStatus("Replica√ß√£o Shopify") === 'completed' ? 'bg-green-500' :
                      getStepStatus("Replica√ß√£o Shopify") === 'in_progress' ? 'bg-blue-500' :
                      'bg-gray-300'
                    }`}>
                      <ShoppingCart size={16} className="text-white" />
                    </div>
                    <div className="ml-4 flex-1">
                      <h5 className="text-sm font-medium text-gray-900">Replica√ß√£o Shopify</h5>
                      <p className="text-xs text-gray-500 mt-1">
                        O produto √© automaticamente replicado nas lojas Shopify conectadas atrav√©s do Sistema Multi-Shopify para adapta√ß√£o regional.
                      </p>
                      <div className={`mt-2 p-2 rounded ${
                        getStepStatus("Replica√ß√£o Shopify") === 'completed' ? 'bg-green-50' :
                        getStepStatus("Replica√ß√£o Shopify") === 'in_progress' ? 'bg-blue-50' :
                        'bg-gray-50'
                      }`}>
                        <span className={`text-xs font-medium ${
                          getStepStatus("Replica√ß√£o Shopify") === 'completed' ? 'text-green-700' :
                          getStepStatus("Replica√ß√£o Shopify") === 'in_progress' ? 'text-blue-700' :
                          'text-gray-500'
                        }`}>
                          {getStepStatus("Replica√ß√£o Shopify") === 'completed' && 'Etapa conclu√≠da'}
                          {getStepStatus("Replica√ß√£o Shopify") === 'in_progress' && 'Em andamento'}
                          {getStepStatus("Replica√ß√£o Shopify") === 'pending' && 'Pendente'}
                        </span>
                      </div>
                    </div>
                  </li>
                  
                  <li className="flex">
                    <div className={`flex-shrink-0 h-8 w-8 rounded-full flex items-center justify-center ${
                      getStepStatus("Relat√≥rio Executivo") === 'completed' ? 'bg-green-500' :
                      getStepStatus("Relat√≥rio Executivo") === 'in_progress' ? 'bg-blue-500' :
                      'bg-gray-300'
                    }`}>
                      <FileText size={16} className="text-white" />
                    </div>
                    <div className="ml-4 flex-1">
                      <h5 className="text-sm font-medium text-gray-900">Relat√≥rio Executivo</h5>
                      <p className="text-xs text-gray-500 mt-1">
                        Gera√ß√£o de relat√≥rio executivo completo baseado nas metodologias de Joel Klettke, Ann Handley e Brian Clark.
                      </p>
                      <div className={`mt-2 p-2 rounded ${
                        getStepStatus("Relat√≥rio Executivo") === 'completed' ? 'bg-green-50' :
                        getStepStatus("Relat√≥rio Executivo") === 'in_progress' ? 'bg-blue-50' :
                        'bg-gray-50'
                      }`}>
                        getStepStatus("Relat√≥rio Executivo") === 'completed' ? 'text-green-700' :
                          getStepStatus("Relat√≥rio Executivo") === 'in_progress' ? 'text-blue-700' :
                          'text-gray-500'
                        }`}>
                          {getStepStatus("Relat√≥rio Executivo") === 'completed' && 'Etapa conclu√≠da'}
                          {getStepStatus("Relat√≥rio Executivo") === 'in_progress' && 'Em andamento'}
                          {getStepStatus("Relat√≥rio Executivo") === 'pending' && 'Pendente'}
                        </span>
                      </div>
                    </div>
                  </li>
                </ul>
              </div>
              
              <div className="mt-6 flex justify-between">
                <button className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                  Ver Status Detalhado
                </button>
                <button 
                  className="px-4 py-2 bg-indigo-600 rounded-md text-sm font-medium text-white hover:bg-indigo-700"
                  onClick={startNextStep}
                >
                  Iniciar Pr√≥xima Etapa
                </button>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default WorkflowModal;
8. Implementa√ß√£o da Fun√ß√£o Lambda para Renderiza√ß√£o Remotion
Vamos criar a fun√ß√£o Lambda que realizar√° a renderiza√ß√£o dos v√≠deos Remotion na AWS:
typescript// src/lambda/remotionRenderer.ts

import { Composition } from 'remotion';
import { bundle } from '@remotion/bundler';
import { renderMedia, RenderMediaOnLambdaOutput } from '@remotion/lambda/client';
import { getCompositions, renderStill } from '@remotion/renderer';
import { config } from '../config';
import * as templates from '../templates/remotion';

exports.handler = async (event) => {
  try {
    console.log('Recebendo solicita√ß√£o de renderiza√ß√£o:', JSON.stringify(event));
    
    const { templateId, params, jobId, outputBucket, outputKey } = event;
    
    // Validar par√¢metros
    if (!templateId || !params || !jobId || !outputBucket || !outputKey) {
      throw new Error('Par√¢metros obrigat√≥rios: templateId, params, jobId, outputBucket, outputKey');
    }
    
    // Obter o template apropriado
    const templateModule = templates[templateId];
    
    if (!templateModule) {
      throw new Error(`Template n√£o encontrado: ${templateId}`);
    }
    
    // Criar um bundle do componente Remotion
    const bundleLocation = await bundle({
      entryPoint: templateModule.entryPoint,
      // Outras op√ß√µes de bundle conforme necess√°rio
    });
    
    // Obter composi√ß√µes dispon√≠veis no bundle
    const compositions = await getCompositions(bundleLocation);
    
    // Encontrar a composi√ß√£o correta
    const composition = compositions.find((c) => c.id === templateModule.compositionId);
    
    if (!composition) {
      throw new Error(`Composi√ß√£o n√£o encontrada: ${templateModule.compositionId}`);
    }
    
    // Iniciar renderiza√ß√£o na Lambda
    const renderResult = await renderMedia({
      region: config.aws.region,
      composition,
      serveUrl: bundleLocation,
      codec: 'h264',
      inputProps: params,
      outputLocation: {
        s3: {
          bucket: outputBucket,
          key: outputKey,
        },
      },
      imageFormat: 'jpeg',
      frameRange: [0, composition.durationInFrames - 1],
      concurrency: 10,
      privacy: 'public',
    });
    
    console.log('Renderiza√ß√£o conclu√≠da:', renderResult);
    
    return {
      success: true,
      renderResult,
      outputUrl: `https://${outputBucket}.s3.${config.aws.region}.amazonaws.com/${outputKey}`
    };
    
  } catch (error) {
    console.error('Erro na renderiza√ß√£o Remotion:', error);
    
    return {
      success: false,
      error: error.message
    };
  }
};
9. Implementa√ß√£o de um Template Remotion para TikTok
Vamos criar um exemplo de template Remotion para o TikTok com legendas palavra por palavra:
tsx// src/templates/remotion/components/TikTokTemplate.tsx

import { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, Sequence, Img, Series } from 'remotion';
import { noise2D } from '@remotion/noise';
import React from 'react';
import { WordAnimation } from './WordAnimation';

interface TikTokTemplateProps {
  productName: string;
  headlines: string[];
  descriptions: string[];
  imageUrls: string[];
  colorPalette: {
    primary: string;
    secondary: string;
    background: string;
    text: string;
    accent: string;
  };
}

export const TikTokTemplate: React.FC<TikTokTemplateProps> = ({
  productName,
  headlines,
  descriptions,
  imageUrls,
  colorPalette
}) => {
  const frame = useCurrentFrame();
  const { width, height, fps, durationInFrames } = useVideoConfig();
  
  // Usar apenas o primeiro headline e descri√ß√£o para este template
  const headline = headlines[0] || productName;
  const description = descriptions[0] || '';
  
  // Dividir textos em palavras para anima√ß√£o
  const headlineWords = headline.split(' ');
  const descriptionWords = description.split(' ');
  
  // Calcular base para efeito de zoom suave
  const zoomFactor = interpolate(
    frame,
    [0, durationInFrames],
    [1, 1.2],
    { extrapolateRight: 'clamp' }
  );
  
  // Criar efeito de movimento de c√¢mera suave com ru√≠do
  const moveX = noise2D('move-x', frame / 100, 0) * 50;
  const moveY = noise2D('move-y', 0, frame / 100) * 50;
  
  return (
    <AbsoluteFill 
      style={{ 
        backgroundColor: colorPalette.background,
        overflow: 'hidden'
      }}
    >
      {/* Camada de imagem com zoom e movimento */}
      <AbsoluteFill
        style={{
          transform: `scale(${zoomFactor}) translate(${moveX}px, ${moveY}px)`,
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
        }}
      >
        {imageUrls[0] && (
          <Img
            src={imageUrls[0]}
            style={{
              width: '100%',
              height: '100%',
              objectFit: 'cover',
            }}
          />
        )}
        
        {/* Gradiente para melhorar a legibilidade do texto */}
        <AbsoluteFill
          style={{
            background: `linear-gradient(transparent 60%, ${colorPalette.background}BB 85%, ${colorPalette.background} 100%)`,
          }}
        />
      </AbsoluteFill>
      
      {/* Conte√∫do de texto */}
      <AbsoluteFill
        style={{
          display: 'flex',
          flexDirection: 'column',
          justifyContent: 'flex-end',
          alignItems: 'center',
          padding: '40px',
          fontFamily: 'Inter, sans-serif',
        }}
      >
        {/* Headline animado palavra por palavra */}
        <Series>
          {headlineWords.map((word, i) => (
            <Series.Sequence durationInFrames={20}>
              <WordAnimation
                key={i}
                word={word}
                index={i}
                colorPalette={colorPalette}
                fontSize={48}
                fontWeight={700}
              />
            </Series.Sequence>
          ))}
        </Series>
        
        {/* Espa√ßamento */}
        <div style={{ height: 20 }} />
        
        {/* Descri√ß√£o animada palavra por palavra */}
        <Sequence from={headlineWords.length * 20}>
          <Series>
            {descriptionWords.map((word, i) => (
              <Series.Sequence durationInFrames={15}>
                <WordAnimation
                  key={i}
                  word={word}
                  index={i}
                  colorPalette={colorPalette}
                  fontSize={30}
                  fontWeight={500}
                />
              </Series.Sequence>
            ))}
          </Series>
        </Sequence>
        
        {/* Bot√£o CTA */}
        <Sequence from={Math.max(headlineWords.length * 20, descriptionWords.length * 15)}>
          <div
            style={{
              marginTop: 30,
              backgroundColor: colorPalette.primary,
              color: 'white',
              paddingVertical: 10,
              paddingHorizontal: 20,
              borderRadius: 30,
              fontSize: 24,
              fontWeight: 600,
              textAlign: 'center',
              boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
              transform: `scale(${
                1 + Math.sin(frame / 10) * 0.05
              })`,
            }}
          >
            Compre Agora
          </div>
        </Sequence>
      </AbsoluteFill>
    </AbsoluteFill>
  );
};

// Componente de anima√ß√£o de palavra
export const WordAnimation: React.FC<{
  word: string;
  index: number;
  colorPalette: any;
  fontSize: number;
  fontWeight: number;
}> = ({ word, index, colorPalette, fontSize, fontWeight }) => {
  const frame = useCurrentFrame();
  
  // Anima√ß√£o de escala para a palavra
  const scale = interpolate(
    frame,
    [0, 5, 15, 20],
    [0, 1.2, 1, 1],
    { extrapolateRight: 'clamp' }
  );
  
  return (
    <div
      style={{
        display: 'inline-block',
        marginRight: 10,
        color: colorPalette.text,
        fontSize,
        fontWeight,
        transform: `scale(${scale})`,
        textShadow: '0 2px 4px rgba(0,0,0,0.3)',
      }}
    >
      {word}
    </div>
  );
};

// Configura√ß√£o de exporta√ß√£o
export const RemotionVideo = () => {
  return (
    <>
      <Composition
        id="tiktok-template"
        component={TikTokTemplate}
        durationInFrames={15 * 30} // 15 segundos a 30fps
        fps={30}
        width={1080}
        height={1920}
        defaultProps={{
          productName: "Produto Incr√≠vel",
          headlines: ["Transforme sua rotina com este produto revolucion√°rio"],
          descriptions: ["Resultados incr√≠veis em apenas 7 dias ou seu dinheiro de volta"],
          imageUrls: ["https://example.com/placeholder.jpg"],
          colorPalette: {
            primary: "#FF5A5F",
            secondary: "#484848",
            background: "#000000",
            text: "#FFFFFF",
            accent: "#00A699"
          }
        }}
      />
    </>
  );
};
10. Arquivo de Interface do Template TikTok
Agora vamos criar o arquivo de interface para o template TikTok conforme a estrutura do DropHunter:
typescript// src/templates/remotion/TikTokTemplate.ts

import { RemotionTemplate } from '../../types/remotion';

export class TikTokTemplate implements RemotionTemplate {
  name = 'V√≠deo Estilo TikTok';
  description = 'Template para TikTok com legendas animadas palavra por palavra';
  supportedFormats = ['9:16'];
  defaultDuration = 15;
  entryPoint = './components/TikTokTemplate';
  compositionId = 'tiktok-template';
  
  /**
   * Prepara par√¢metros espec√≠ficos para este template
   */
  prepareParams(briefingData: any) {
    const {
      productName,
      headlines = [],
      descriptions = [],
      imageUrls = [],
      visualGuidelines = {},
      emotionalTriggers = []
    } = briefingData;
    
    // Extrair cores da paleta visual, ou usar padr√µes para TikTok
    const colorPalette = visualGuidelines.colorPalette || {
      primary: '#FF5A5F',
      secondary: '#484848',
      background: '#000000',
      text: '#FFFFFF',
      accent: '#00A699'
    };
    
    // Selecionar os headlines e descri√ß√µes mais curtos para melhor fit em TikTok
    const sortedHeadlines = [...headlines].sort((a, b) => a.length - b.length);
    const sortedDescriptions = [...descriptions].sort((a, b) => a.length - b.length);
    
    const topHeadlines = sortedHeadlines.slice(0, 2);
    const topDescriptions = sortedDescriptions.slice(0, 2);
    
    // Calcular dura√ß√£o aproximada baseada no n√∫mero de palavras
    const totalWords = (topHeadlines[0]?.split(' ').length || 0) + 
                      (topDescriptions[0]?.split(' ').length || 0);
    const estimatedDuration = Math.max(15, Math.min(60, Math.ceil(totalWords * 0.5)));
    
    return {
      productName,
      headlines: topHeadlines,
      descriptions: topDescriptions,
      imageUrls,
      colorPalette,
      emotionalTriggers,
      duration: estimatedDuration
    };
  }
}
11. Configura√ß√£o de Endpoints de API Express
Vamos configurar os endpoints da API Express para o sistema Remotion:
typescript// src/drophunter/routes/api.ts

import express from 'express';
import { RemotionController } from '../controllers/RemotionController';

const router = express.Router();
const remotionController = new RemotionController();

// Rotas para o sistema Remotion
router.get('/remotion/templates', remotionController.getTemplates.bind(remotionController));
router.post('/remotion/render', remotionController.startRendering.bind(remotionController));
router.get('/remotion/status/:jobId', remotionController.checkStatus.bind(remotionController));
router.delete('/remotion/cancel/:jobId', remotionController.cancelRendering.bind(remotionController));

// Exportar router
export default router;
12. Atualiza√ß√£o do Dashboard Principal
Finalmente, vamos atualizar o dashboard principal para mostrar estat√≠sticas dos v√≠deos renderizados:
jsx// Adi√ß√£o ao componente Dashboard existente

// Stats Cards - Adicionando estat√≠sticas de v√≠deo
<div className="grid grid-cols-5 gap-5 mb-6">
  {/* Cards existentes... */}
  
  {/* Novo card para estat√≠sticas de v√≠deo */}
  <div className="bg-white rounded-lg shadow p-6">
    <div className="flex items-center">
      <div className="p-3 rounded-md bg-purple-100 text-purple-600">
        <Film size={20} />
      </div>
      <div className="ml-4">
        <h2 className="text-sm font-medium text-gray-500">V√≠deos Gerados</h2>
        <div className="mt-1 flex items-baseline">
          <p className="text-2xl font-semibold text-gray-900">87</p>
          <p className="ml-2 text-sm font-medium text-green-600">+14 hoje</p>
        </div>
      </div>
    </div>
  </div>
</div>

{/* Se√ß√£o de Estat√≠sticas de V√≠deo */}
<div className="bg-white rounded-lg shadow mb-6">
  <div className="px-4 py-5 sm:px-6 border-b border-gray-200">
    <h3 className="text-lg font-medium text-gray-900">Estat√≠sticas de Renderiza√ß√£o de V√≠deo</h3>
    <p className="mt-1 text-sm text-gray-500">Performance do sistema Remotion por template e pa√≠s</p>
  </div>
  <div className="p-6">
    <div className="flex justify-between items-center mb-6">
      <h4 className="text-sm font-medium text-gray-700">V√≠deos por Template</h4>
      <div className="text-sm text-gray-500">√öltimos 30 dias</div>
    </div>
    
    {/* Estat√≠sticas por template */}
    <div className="space-y-4 mb-8">
      <div>
        <div className="flex justify-between mb-1">
          <span className="text-sm font-medium text-gray-700">Performance Max</span>
          <span className="text-sm font-medium text-gray-700">42 v√≠deos</span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2.5">
          <div className="bg-indigo-600 h-2.5 rounded-full" style={{ width: '48%' }}></div>
        </div>
      </div>
      
      <div>
        <div className="flex justify-between mb-1">
          <span className="text-sm font-medium text-gray-700">YouTube Shorts</span>
          <span className="text-sm font-medium text-gray-700">24 v√≠deos</span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2.5">
          <div className="bg-red-600 h-2.5 rounded-full" style={{ width: '28%' }}></div>
        </div>
      </div>
      
      <div>
        <div className="flex justify-between mb-1">
          <span className="text-sm font-medium text-gray-700">TikTok</span>
          <span className="text-sm font-medium text-gray-700">18 v√≠deos</span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2.5">
          <div className="bg-purple-600 h-2.5 rounded-full" style={{ width: '21%' }}></div>
        </div>
      </div>
      
      <div>
        <div className="flex justify-between mb-1">
          <span className="text-sm font-medium text-gray-700">3D Produto</span>
          <span className="text-sm font-medium text-gray-700">3 v√≠deos</span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2.5">
          <div className="bg-green-600 h-2.5 rounded-full" style={{ width: '3%' }}></div>
        </div>
      </div>
    </div>
    
    <div className="flex justify-between items-center mb-6">
      <h4 className="text-sm font-medium text-gray-700">Tempo M√©dio de Renderiza√ß√£o</h4>
      <div className="text-sm text-green-600 font-medium">-12% √∫ltima semana</div>
    </div>
    
    {/* Estat√≠sticas de tempo de renderiza√ß√£o */}
    <div className="grid grid-cols-4 gap-4 mb-6">
      <div className="bg-gray-50 p-4 rounded-lg">
        <div className="text-sm text-gray-500">Performance Max</div>
        <div className="text-xl font-semibold text-gray-900 mt-1">8:24 min</div>
      </div>
      
      <div className="bg-gray-50 p-4 rounded-lg">
        <div className="text-sm text-gray-500">YouTube</div>
        <div className="text-xl font-semibold text-gray-900 mt-1">12:10 min</div>
      </div>
      
      <div className="bg-gray-50 p-4 rounded-lg">
        <div className="text-sm text-gray-500">TikTok</div>
        <div className="text-xl font-semibold text-gray-900 mt-1">5:45 min</div>
      </div>
      
      <div className="bg-gray-50 p-4 rounded-lg">
        <div className="text-sm text-gray-500">3D Produto</div>
        <div className="text-xl font-semibold text-gray-900 mt-1">18:33 min</div>
      </div>
    </div>
    
    <div className="flex justify-end">
      <button className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 flex items-center">
        <BarChart size={16} className="mr-2" />
        Ver Relat√≥rio Completo
      </button>
    </div>
  </div>
</div>
13. Atualiza√ß√£o do arquivo package.json para incluir depend√™ncias do Remotion
Por fim, vamos atualizar o arquivo package.json para incluir as depend√™ncias necess√°rias para o Remotion:
json{
  "name": "drophunter",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    // Depend√™ncias existentes
    
    // Novas depend√™ncias para Remotion
    "@remotion/bundler": "^3.3.100",
    "@remotion/cli": "^3.3.100",
    "@remotion/lambda": "^3.3.100",
    "@remotion/noise": "^3.3.100",
    "@remotion/renderer": "^3.3.100",
    "remotion": "^3.3.100",
    
    // AWS SDK
    "@aws-sdk/client-lambda": "^3.400.0",
    "@aws-sdk/client-s3": "^3.400.0",
    "@aws-sdk/s3-request-presigner": "^3.400.0"
  },
  "scripts": {
    // Scripts existentes
    
    // Novos scripts para Remotion
    "remotion:preview": "remotion preview src/templates/remotion/index.tsx",
    "remotion:render": "remotion render src/templates/remotion/index.tsx",
    "remotion:deploy": "ts-node scripts/deployRemotionLambda.ts"
  }
}

Com esta implementa√ß√£o, o DropHunter agora possui um sistema completo de renderiza√ß√£o de v√≠deos usando Remotion, que se integra perfeitamente ao fluxo de trabalho existente. Este sistema permite que a Claude 3.7 Sonnet n√£o apenas identifique oportunidades de produtos e crie briefings criativos, mas tamb√©m transforme esses conceitos em v√≠deos finalizados prontos para implementa√ß√£o em campanhas.
Esta √© uma solu√ß√£o verdadeiramente end-to-end, automatizando todo o processo desde a descoberta at√© a implementa√ß√£o, maximizando a efici√™ncia e o ROI das campanhas de dropshipping.

/**
 * Fase 10: Sistema de Relat√≥rios Executivos
 * Status: ‚è±Ô∏è Pendente
 */
class ExecutiveReportingSystem {
  constructor() {
    this.claudeAPI = new ClaudeIntegrationAPI();
    this.opportunityRepository = new OpportunityRepository();
    this.reportRepository = new ReportRepository();
  }

  async initialize() {
    console.log("Inicializando Sistema de Relat√≥rios Executivos...");
    
    try {
      // Inicializar reposit√≥rios
      await this.opportunityRepository.initialize();
      await this.reportRepository.initialize();
      
      console.log("Sistema de Relat√≥rios Executivos inicializado com sucesso");
      return true;
    } catch (error) {
      console.error("Erro na inicializa√ß√£o do Sistema de Relat√≥rios:", error);
      return false;
    }
  }

  /**
   * Gera um relat√≥rio executivo para uma oportunidade
   */
  async generateOpportunityReport(opportunityId) {
    console.log(`Gerando relat√≥rio executivo para oportunidade: ${opportunityId}`);
    
    try {
      // Obter dados da oportunidade
      const opportunity = await this.opportunityRepository.getById(opportunityId);
      if (!opportunity) {
        throw new Error(`Oportunidade n√£o encontrada: ${opportunityId}`);
      }
      
      // Obter dados adicionais de mercado
      const marketData = await this.marketRepository.getMarketData(opportunity.countryCode);
      
      // Construir prompt para a Claude
      const reportPrompt = this.buildReportPrompt(opportunity, marketData);
      
      // Obter relat√≥rio da Claude 3.7 Sonnet
      const claudeResponse = await this.claudeAPI.generate(reportPrompt);
      
      // Processar resposta
      const reportContent = this.processReportResponse(claudeResponse);
      
      // Criar registro de relat√≥rio
      const report = {
        id: uuidv4(),
        opportunityId: opportunityId,
        productName: opportunity.productName,
        country: opportunity.country,
        content: reportContent,
        createdAt: new Date()
      };
      
      // Salvar relat√≥rio
      await this.reportRepository.saveReport(report);
      
      console.log(`Relat√≥rio executivo gerado com sucesso para ${opportunity.productName}`);
      return this.formatOpportunityReport(report);
    } catch (error) {
      console.error(`Erro ao gerar relat√≥rio ${opportunityId}:`, error);
      throw error;
    }
  }

  /**
   * Constr√≥i o prompt para gera√ß√£o de relat√≥rio
   */
  buildReportPrompt(opportunity, marketData) {
    return {
      system: `
        Voc√™ √© um especialista em gera√ß√£o de relat√≥rios executivos para oportunidades de dropshipping, treinado nas metodologias de Joel Klettke (Evidence-Based Copywriting), Ann Handley (Everybody Writes) e Brian Clark (Teaching Sells).
        
        Ao gerar relat√≥rios, voc√™ deve:
        - Basear todas as afirma√ß√µes em dados concretos e evid√™ncias
        - Manter linguagem clara, concisa e direta
        - Estruturar informa√ß√µes em ordem l√≥gica e priorit√°ria para o leitor
        - Incluir sempre um resumo executivo, an√°lise de mercado, proje√ß√µes financeiras, recomenda√ß√µes estrat√©gicas e um plano de a√ß√£o passo a passo
        - Apresentar m√©tricas relevantes com contexto adequado
        - Fornecer recomenda√ß√µes acion√°veis e espec√≠ficas
        
        Seu relat√≥rio deve ser profissional, baseado em evid√™ncias e altamente acion√°vel.
      `,
      user: `
        Gere um relat√≥rio executivo completo para a seguinte oportunidade de dropshipping:
        
        DADOS DA OPORTUNIDADE:
        ${JSON.stringify(opportunity, null, 2)}
        
        DADOS ADICIONAIS DE MERCADO:
        ${JSON.stringify(marketData, null, 2)}
        
        O relat√≥rio deve incluir:
        1. Resumo Executivo (m√°ximo 3 par√°grafos)
        2. An√°lise de Mercado (tend√™ncias, tamanho, competi√ß√£o)
        3. An√°lise de Produto (diferencia√ß√£o, pontos fortes/fracos)
        4. Proje√ß√µes Financeiras (ROI, custos, margens)
        5. Estrat√©gia de Marketing Recomendada
        6. Plano de A√ß√£o Passo a Passo
        7. Riscos e Mitiga√ß√µes
        8. Conclus√£o
        
        Forne√ßa um relat√≥rio detalhado e acion√°vel que possa ser usado para tomar decis√µes de neg√≥cio.
      `
    };
  }

  /**
   * Processa a resposta do relat√≥rio
   */
  processReportResponse(claudeResponse) {
    // Como o relat√≥rio √© um documento estruturado, n√£o precisamos processar em JSON
    // Apenas fazer limpezas b√°sicas se necess√°rio
    return claudeResponse.trim();
  }

  /**
   * Formata o relat√≥rio para apresenta√ß√£o
   */
  formatOpportunityReport(report) {
    // Adicionar metadados e formata√ß√£o para apresenta√ß√£o
    return {
      id: report.id,
      title: `Relat√≥rio: ${report.productName} - ${report.country}`,
      opportunity: report.opportunityId,
      generatedAt: report.createdAt,
      content: report.content,
      formattedDate: new Date(report.createdAt).toLocaleDateString('pt-BR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
      })
    };
  }
}

/**
 * Fase 11: Sistema Integrado de Fluxo de Trabalho
 * Status: ‚è±Ô∏è Pendente
 */
class IntegratedWorkflowSystem {
  constructor() {
    // Sistemas especializados
    this.monitoringSystem = new ProductMonitoringSystem();
    this.multiShopifySystem = new MultiShopifySystem();
    this.creativeStudioSystem = new CreativeStudioSystem();
    this.reportingSystem = new ExecutiveReportingSystem();
    
    // Componentes de apoio
    this.jobScheduler = new JobScheduler();
    this.claudeAPI = new ClaudeIntegrationAPI();
  }

  async initialize() {
    console.log("Inicializando Sistema Integrado de Fluxo de Trabalho...");
    
    try {
      // Inicializar todos os sistemas componentes
      await this.monitoringSystem.initialize();
      await this.multiShopifySystem.initialize();
      await this.creativeStudioSystem.initialize();
      await this.reportingSystem.initialize();
      
      // Inicializar agendador de tarefas
      await this.jobScheduler.initialize();
      
      console.log("Sistema Integrado de Fluxo de Trabalho inicializado com sucesso");
      return true;
    } catch (error) {
      console.error("Erro na inicializa√ß√£o do Sistema Integrado:", error);
      return false;
    }
  }

  /**
   * Executa o fluxo completo para uma oportunidade
   */
  async executeFullWorkflow(opportunityId) {
    console.log(`Executando fluxo completo para oportunidade: ${opportunityId}`);
    
    try {
      // Etapa 1: Verificar oportunidade
      const opportunity = await this.opportunityRepository.getById(opportunityId);
      if (!opportunity) {
        throw new Error(`Oportunidade n√£o encontrada: ${opportunityId}`);
      }
      
      console.log(`Iniciando fluxo para ${opportunity.productName} - ${opportunity.country}`);
      
      // Etapa 2: Gerar briefing criativo
      console.log("Etapa 2: Gerando briefing criativo...");
      const briefing = await this.creativeStudioSystem.generateCreativeBriefing(opportunityId);
      
      // Etapa 3: Gerar assets criativos
      console.log("Etapa 3: Gerando assets criativos...");
      const assets = await this.creativeStudioSystem.generateCreativeAssets(briefing.id);
      
      // Etapa 4: Replicar para lojas Shopify
      console.log("Etapa 4: Replicando para lojas Shopify...");
      const replicationResult = await this.multiShopifySystem.replicateProduct(opportunityId);
      
      // Etapa 5: Gerar relat√≥rio executivo
      console.log("Etapa 5: Gerando relat√≥rio executivo...");
      const report = await this.reportingSystem.generateOpportunityReport(opportunityId);
      
      // Compilar resultados do fluxo
      const workflowResults = {
        opportunityId,
        productName: opportunity.productName,
        country: opportunity.country,
        steps: {
          briefing: {
            id: briefing.id,
            status: 'completed',
            timestamp: briefing.createdAt
          },
          assets: {
            id: assets.id,
            status: 'completed',
            timestamp: assets.createdAt
          },
          replication: {
            status: replicationResult.successCount > 0 ? 'completed' : 'partial',
            successCount: replicationResult.successCount,
            failureCount: replicationResult.failureCount,
            timestamp: new Date()
          },
          report: {
            id: report.id,
            status: 'completed',
            timestamp: report.generatedAt
          }
        },
        completedAt: new Date(),
        status: 'completed'
      };
      
      // Atualizar oportunidade com resultados do fluxo
      opportunity.workflowResults = workflowResults;
      opportunity.status = 'processed';
      await this.opportunityRepository.update(opportunity);
      
      console.log(`Fluxo completo executado com sucesso para ${opportunity.productName}`);
      return workflowResults;
    } catch (error) {
      console.error(`Erro na execu√ß√£o do fluxo para ${opportunityId}:`, error);
      
      // Registrar falha no fluxo
      const failedWorkflow = {
        opportunityId,
        status: 'failed',
        error: error.message,
        timestamp: new Date()
      };
      
      // Atualizar oportunidade com falha
      const opportunity = await this.opportunityRepository.getById(opportunityId);
      if (opportunity) {
        opportunity.workflowResults = failedWorkflow;
        opportunity.status = 'error';
        await this.opportunityRepository.update(opportunity);
      }
      
      throw error;
    }
  }
}

// BLOCO 3: EXPORTA√á√ÉO E INICIALIZA√á√ÉO DO SISTEMA

/**
 * Fun√ß√£o para inicializar o sistema DropHunter completo
 */
async function initializeDropHunterSystem() {
  console.log("Inicializando sistema DropHunter completo...");
  
  try {
    // Inicializar infraestrutura b√°sica
    const infrastructure = new DropHunterInfrastructure();
    await infrastructure.initialize();
    
    // Inicializar reposit√≥rios de conhecimento especializado
    const googleAdsExperts = new ExpertKnowledgeRepository('googleAdsExperts', 44);
    const productMiningExperts = new ExpertKnowledgeRepository('productMiningExperts', 25);
    const advancedAgents = new ExpertKnowledgeRepository('advancedAgents', 25);
    const copywritingExperts = new ExpertKnowledgeRepository('copywritingExperts', 50);
    
    await googleAdsExperts.initialize({
      source: './data/configuracoes_google_ads_44_especialistas.json',
      taxonomyPath: './taxonomy/google_ads_expert_taxonomy.json',
      embedModelPath: './models/expert_knowledge_embedding_model.bin'
    });
    
    await productMiningExperts.initialize({
      source: './data/25_especialistas_mineracao_produtos.json',
      taxonomyPath: './taxonomy/product_mining_taxonomy.json',
      embedModelPath: './models/product_mining_embedding_model.bin'
    });
    
    await advancedAgents.initialize({
      source: './data/25_agentes_sistemas_avancados.json',
      taxonomyPath: './taxonomy/advanced_agents_taxonomy.json',
      embedModelPath: './models/agent_systems_embedding_model.bin'
    });
    
    await copywritingExperts.initialize({
      source: './data/50_especialistas_copywriting.json',
      taxonomyPath: './taxonomy/copywriting_expert_taxonomy.json',
      embedModelPath: './models/copywriting_embedding_model.bin'
    });
    
    // Inicializar sistema integrado
    const integratedSystem = new IntegratedWorkflowSystem();
    await integratedSystem.initialize();
    
    console.log("Sistema DropHunter inicializado com sucesso.");
    
    return {
      infrastructure,
      repositories: {
        googleAdsExperts,
        productMiningExperts,
        advancedAgents,
        copywritingExperts
      },
      integratedSystem
    };
  } catch (error) {
    console.error("Erro cr√≠tico na inicializa√ß√£o do DropHunter:", error);
    throw error;
  }
}

// Exportar componentes principais
module.exports = {
  // Infraestrutura
  DropHunterInfrastructure,
  
  // Reposit√≥rios de conhecimento
  ExpertKnowledgeRepository,
  
  // Sistemas estratificados
  ProductDiscoverySystem,
  RegionalMarketAnalysisSystem,
  HighConversionCopywritingSystem,
  CampaignImplementationSystem,
  
  // Componentes funcionais
  ProductMonitoringSystem,
  MultiShopifySystem,
  CreativeStudioSystem,
  ExecutiveReportingSystem,
  
  // Sistema integrado
  IntegratedWorkflowSystem,
  
  // Fun√ß√£o de inicializa√ß√£o
  initializeDropHunterSystem
};